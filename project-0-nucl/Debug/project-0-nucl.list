
project-0-nucl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007418  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08007618  08007618  00008618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  0000919c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007820  08007820  00008820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007828  08007828  0000919c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007828  08007828  00008828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800782c  0800782c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007830  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  0800788c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  0800792c  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000854  2000019c  080079cc  0000919c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009f0  080079cc  000099f0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000178f7  00000000  00000000  000091ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002df5  00000000  00000000  00020ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001378  00000000  00000000  000238b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f33  00000000  00000000  00024c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029cc5  00000000  00000000  00025b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000165f6  00000000  00000000  0004f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104312  00000000  00000000  00065e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016a130  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005bb0  00000000  00000000  0016a174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  0016fd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	08007600 	.word	0x08007600

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	08007600 	.word	0x08007600

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	0000      	movs	r0, r0
	...

08000620 <denormalize>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double denormalize(double x, double x_min, double x_max) {
 8000620:	b480      	push	{r7}
 8000622:	b089      	sub	sp, #36	@ 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	ed87 0b04 	vstr	d0, [r7, #16]
 800062a:	ed87 1b02 	vstr	d1, [r7, #8]
 800062e:	ed87 2b00 	vstr	d2, [r7]
    if (x < 0.0) x = 0.0;
 8000632:	ed97 7b04 	vldr	d7, [r7, #16]
 8000636:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d505      	bpl.n	800064c <denormalize+0x2c>
 8000640:	f04f 0200 	mov.w	r2, #0
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (x > 100.0) x = 100.0;
 800064c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000650:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80006a8 <denormalize+0x88>
 8000654:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065c:	dd04      	ble.n	8000668 <denormalize+0x48>
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <denormalize+0x90>)
 8000664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double ratio = x / 100.0;
 8000668:	ed97 6b04 	vldr	d6, [r7, #16]
 800066c:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80006a8 <denormalize+0x88>
 8000670:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000674:	ed87 7b06 	vstr	d7, [r7, #24]
    return x_min + ratio * (x_max - x_min);
 8000678:	ed97 6b00 	vldr	d6, [r7]
 800067c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000680:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000684:	ed97 7b06 	vldr	d7, [r7, #24]
 8000688:	ee26 6b07 	vmul.f64	d6, d6, d7
 800068c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000690:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8000694:	eeb0 0b47 	vmov.f64	d0, d7
 8000698:	3724      	adds	r7, #36	@ 0x24
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	f3af 8000 	nop.w
 80006a8:	00000000 	.word	0x00000000
 80006ac:	40590000 	.word	0x40590000
 80006b0:	40590000 	.word	0x40590000

080006b4 <parse_servo_command>:
  * @param  command: The null-terminated string to parse.
  * @param  servo_id: Pointer to store the extracted servo ID (1 or 2).
  * @param  angle: Pointer to store the extracted angle (0-100).
  * @retval 1 if parsing is successful, 0 otherwise.
  */
_Bool parse_servo_command(const char *command, int *servo_id, int *angle) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
    // Use sscanf to match the format "s<integer><integer>"
    // It will try to extract two integers from the string after the 's'.
    if (sscanf(command, "s%1d%d", servo_id, angle) != 2) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	4910      	ldr	r1, [pc, #64]	@ (8000708 <parse_servo_command+0x54>)
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f005 fe70 	bl	80063ac <siscanf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d001      	beq.n	80006d6 <parse_servo_command+0x22>
        // If sscanf did not find exactly two numbers, the format is wrong.
        return 0; // Failure
 80006d2:	2300      	movs	r3, #0
 80006d4:	e014      	b.n	8000700 <parse_servo_command+0x4c>
    }

    // Now, validate the values we extracted.
    if (*servo_id < 1 || *servo_id > 2) {
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dd03      	ble.n	80006e6 <parse_servo_command+0x32>
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	dd01      	ble.n	80006ea <parse_servo_command+0x36>
        // Servo ID must be 1 or 2.
        return 0; // Failure
 80006e6:	2300      	movs	r3, #0
 80006e8:	e00a      	b.n	8000700 <parse_servo_command+0x4c>
    }

    if (*angle < 0 || *angle > 100) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db03      	blt.n	80006fa <parse_servo_command+0x46>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b64      	cmp	r3, #100	@ 0x64
 80006f8:	dd01      	ble.n	80006fe <parse_servo_command+0x4a>
        // Angle must be between 0 and 100.
        return 0; // Failure
 80006fa:	2300      	movs	r3, #0
 80006fc:	e000      	b.n	8000700 <parse_servo_command+0x4c>
    }

    // If we get here, the command is valid.
    return 1; // Success
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08007618 	.word	0x08007618

0800070c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1f      	ldr	r2, [pc, #124]	@ (8000798 <HAL_UART_RxCpltCallback+0x8c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d137      	bne.n	800078e <HAL_UART_RxCpltCallback+0x82>
		HAL_UART_Transmit(huart, rx_char, 1, 10);
 800071e:	230a      	movs	r3, #10
 8000720:	2201      	movs	r2, #1
 8000722:	491e      	ldr	r1, [pc, #120]	@ (800079c <HAL_UART_RxCpltCallback+0x90>)
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f004 f805 	bl	8004734 <HAL_UART_Transmit>

		if (rx_char[0] == '\n' || rx_char[0] == '\r') {
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <HAL_UART_RxCpltCallback+0x90>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b0a      	cmp	r3, #10
 8000730:	d003      	beq.n	800073a <HAL_UART_RxCpltCallback+0x2e>
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <HAL_UART_RxCpltCallback+0x90>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b0d      	cmp	r3, #13
 8000738:	d113      	bne.n	8000762 <HAL_UART_RxCpltCallback+0x56>
			rx_buffer[rx_index] = '\0';
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_UART_RxCpltCallback+0x94>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_UART_RxCpltCallback+0x98>)
 8000744:	2100      	movs	r1, #0
 8000746:	5499      	strb	r1, [r3, r2]
			command_ready = 1;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <HAL_UART_RxCpltCallback+0x9c>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <HAL_UART_RxCpltCallback+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t*)"\r\n", 2, 10);
 8000754:	230a      	movs	r3, #10
 8000756:	2202      	movs	r2, #2
 8000758:	4914      	ldr	r1, [pc, #80]	@ (80007ac <HAL_UART_RxCpltCallback+0xa0>)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f003 ffea 	bl	8004734 <HAL_UART_Transmit>
 8000760:	e010      	b.n	8000784 <HAL_UART_RxCpltCallback+0x78>
		} else if (rx_index < RX_BUFFER_SIZE - 1) {
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_UART_RxCpltCallback+0x94>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b3e      	cmp	r3, #62	@ 0x3e
 800076a:	d80b      	bhi.n	8000784 <HAL_UART_RxCpltCallback+0x78>
			rx_buffer[rx_index++] = rx_char[0];
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <HAL_UART_RxCpltCallback+0x94>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	b2d1      	uxtb	r1, r2
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <HAL_UART_RxCpltCallback+0x94>)
 8000778:	7011      	strb	r1, [r2, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <HAL_UART_RxCpltCallback+0x90>)
 800077e:	7819      	ldrb	r1, [r3, #0]
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_UART_RxCpltCallback+0x98>)
 8000782:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart3, rx_char, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	4905      	ldr	r1, [pc, #20]	@ (800079c <HAL_UART_RxCpltCallback+0x90>)
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <HAL_UART_RxCpltCallback+0xa4>)
 800078a:	f004 f85c 	bl	8004846 <HAL_UART_Receive_IT>
	}
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40004800 	.word	0x40004800
 800079c:	20000894 	.word	0x20000894
 80007a0:	20000895 	.word	0x20000895
 80007a4:	20000854 	.word	0x20000854
 80007a8:	20000896 	.word	0x20000896
 80007ac:	08007620 	.word	0x08007620
 80007b0:	200002ec 	.word	0x200002ec
 80007b4:	00000000 	.word	0x00000000

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fdba 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f89d 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fa3b 	bl	8000c40 <MX_GPIO_Init>
  MX_ETH_Init();
 80007ca:	f000 f909 	bl	80009e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007ce:	f000 f9d9 	bl	8000b84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d2:	f000 fa07 	bl	8000be4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM5_Init();
 80007d6:	f000 f951 	bl	8000a7c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80007da:	2100      	movs	r1, #0
 80007dc:	4840      	ldr	r0, [pc, #256]	@ (80008e0 <main+0x128>)
 80007de:	f003 f831 	bl	8003844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80007e2:	210c      	movs	r1, #12
 80007e4:	483e      	ldr	r0, [pc, #248]	@ (80008e0 <main+0x128>)
 80007e6:	f003 f82d 	bl	8003844 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, rx_char, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	493d      	ldr	r1, [pc, #244]	@ (80008e4 <main+0x12c>)
 80007ee:	483e      	ldr	r0, [pc, #248]	@ (80008e8 <main+0x130>)
 80007f0:	f004 f829 	bl	8004846 <HAL_UART_Receive_IT>

  //double x = 0;
  //uint16_t pos1 = 0, pos2 = 0;

  uint8_t received_char;
  GPIO_PinState last_state = GPIO_PIN_SET;
 80007f4:	2301      	movs	r3, #1
 80007f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  char* startup_msg = "Servo Controller Ready. Format: s<id><angle> (e.g., s190)\r\n";
 80007fa:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <main+0x134>)
 80007fc:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_UART_Transmit(&huart3, (uint8_t*)startup_msg, strlen(startup_msg), HAL_MAX_DELAY);
 80007fe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000800:	f7ff fd1e 	bl	8000240 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800080e:	4836      	ldr	r0, [pc, #216]	@ (80008e8 <main+0x130>)
 8000810:	f003 ff90 	bl	8004734 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (command_ready) {
 8000814:	4b36      	ldr	r3, [pc, #216]	@ (80008f0 <main+0x138>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <main+0x5c>
		int servo_id, angle;
		if(parse_servo_command((const char*)rx_buffer, &servo_id, &angle)) {
 800081e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000822:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000826:	4619      	mov	r1, r3
 8000828:	4832      	ldr	r0, [pc, #200]	@ (80008f4 <main+0x13c>)
 800082a:	f7ff ff43 	bl	80006b4 <parse_servo_command>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d037      	beq.n	80008a4 <main+0xec>
		  // valid command
		  uint16_t pulse = (uint16_t)denormalize(angle, SERVO_MIN, SERVO_MAX);
 8000834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000836:	ee07 3a90 	vmov	s15, r3
 800083a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800083e:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 80008d0 <main+0x118>
 8000842:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 80008d8 <main+0x120>
 8000846:	eeb0 0b47 	vmov.f64	d0, d7
 800084a:	f7ff fee9 	bl	8000620 <denormalize>
 800084e:	eeb0 7b40 	vmov.f64	d7, d0
 8000852:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000856:	ee17 3a90 	vmov	r3, s15
 800085a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		  if (servo_id == 1) {
 800085c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800085e:	2b01      	cmp	r3, #1
 8000860:	d104      	bne.n	800086c <main+0xb4>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, pulse);
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <main+0x128>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
 800086a:	e006      	b.n	800087a <main+0xc2>
		  } else if (servo_id == 2) {
 800086c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800086e:	2b02      	cmp	r3, #2
 8000870:	d103      	bne.n	800087a <main+0xc2>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, pulse);
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <main+0x128>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8000878:	641a      	str	r2, [r3, #64]	@ 0x40
		  }
		  char ok_msg[50];
		  sprintf(ok_msg, "OK: Set Servo %d to angle %d (pulse %u)\r\n", servo_id, angle, pulse);
 800087a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800087c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800087e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000880:	4638      	mov	r0, r7
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	460b      	mov	r3, r1
 8000886:	491c      	ldr	r1, [pc, #112]	@ (80008f8 <main+0x140>)
 8000888:	f005 fd6e 	bl	8006368 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)ok_msg, strlen(ok_msg), 100);
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fcd6 	bl	8000240 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	4639      	mov	r1, r7
 800089a:	2364      	movs	r3, #100	@ 0x64
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <main+0x130>)
 800089e:	f003 ff49 	bl	8004734 <HAL_UART_Transmit>
 80008a2:	e010      	b.n	80008c6 <main+0x10e>
		} else {
		  // Command was invalid
		  char err_msg[50];
		  sprintf(err_msg, "Error: Invalid command '%s'\r\n", (const char*)rx_buffer);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <main+0x13c>)
 80008a8:	4914      	ldr	r1, [pc, #80]	@ (80008fc <main+0x144>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fd5c 	bl	8006368 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)err_msg, strlen(err_msg), 100);
 80008b0:	463b      	mov	r3, r7
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fcc4 	bl	8000240 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4639      	mov	r1, r7
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <main+0x130>)
 80008c2:	f003 ff37 	bl	8004734 <HAL_UART_Transmit>
		}
		command_ready = 0;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <main+0x138>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
	if (command_ready) {
 80008cc:	e7a2      	b.n	8000814 <main+0x5c>
 80008ce:	bf00      	nop
 80008d0:	00000000 	.word	0x00000000
 80008d4:	40a38800 	.word	0x40a38800
 80008d8:	00000000 	.word	0x00000000
 80008dc:	407f4000 	.word	0x407f4000
 80008e0:	200002a0 	.word	0x200002a0
 80008e4:	20000894 	.word	0x20000894
 80008e8:	200002ec 	.word	0x200002ec
 80008ec:	08007624 	.word	0x08007624
 80008f0:	20000896 	.word	0x20000896
 80008f4:	20000854 	.word	0x20000854
 80008f8:	08007660 	.word	0x08007660
 80008fc:	0800768c 	.word	0x0800768c

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2234      	movs	r2, #52	@ 0x34
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 fd7a 	bl	8006408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000924:	f001 fd7a 	bl	800241c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <SystemClock_Config+0xd8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a2a      	ldr	r2, [pc, #168]	@ (80009d8 <SystemClock_Config+0xd8>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
 8000934:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <SystemClock_Config+0xd8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <SystemClock_Config+0xdc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <SystemClock_Config+0xdc>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <SystemClock_Config+0xdc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000970:	23d8      	movs	r3, #216	@ 0xd8
 8000972:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000978:	2309      	movs	r3, #9
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fda9 	bl	80024dc <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000990:	f000 fa0a 	bl	8000da8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000994:	f001 fd52 	bl	800243c <HAL_PWREx_EnableOverDrive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800099e:	f000 fa03 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2107      	movs	r1, #7
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f839 	bl	8002a38 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009cc:	f000 f9ec 	bl	8000da8 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	@ 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <MX_ETH_Init+0x84>)
 80009e6:	4a20      	ldr	r2, [pc, #128]	@ (8000a68 <MX_ETH_Init+0x88>)
 80009e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009f8:	22e1      	movs	r2, #225	@ 0xe1
 80009fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a1a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <MX_ETH_Init+0x90>)
 8000a20:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a24:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <MX_ETH_Init+0x94>)
 8000a26:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a2a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a2e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a32:	f000 fea5 	bl	8001780 <HAL_ETH_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f9b4 	bl	8000da8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a40:	2238      	movs	r2, #56	@ 0x38
 8000a42:	2100      	movs	r1, #0
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a46:	f005 fcdf 	bl	8006408 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a4c:	2221      	movs	r2, #33	@ 0x21
 8000a4e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a52:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a56:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001f0 	.word	0x200001f0
 8000a68:	40028000 	.word	0x40028000
 8000a6c:	20000898 	.word	0x20000898
 8000a70:	200000fc 	.word	0x200000fc
 8000a74:	2000005c 	.word	0x2000005c
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	@ 0x38
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000aae:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000ab0:	4a33      	ldr	r2, [pc, #204]	@ (8000b80 <MX_TIM5_Init+0x104>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 8000ab4:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000ab6:	226b      	movs	r2, #107	@ 0x6b
 8000ab8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000ac2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ac6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ad4:	4829      	ldr	r0, [pc, #164]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000ad6:	f002 fdfd 	bl	80036d4 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000ae0:	f000 f962 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4822      	ldr	r0, [pc, #136]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000af2:	f003 f8b5 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000afc:	f000 f954 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b00:	481e      	ldr	r0, [pc, #120]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000b02:	f002 fe3e 	bl	8003782 <HAL_TIM_PWM_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000b0c:	f000 f94c 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000b20:	f003 fd2c 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000b2a:	f000 f93d 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2e:	2360      	movs	r3, #96	@ 0x60
 8000b30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000b32:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000b48:	f002 ff76 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8000b52:	f000 f929 	bl	8000da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b56:	463b      	mov	r3, r7
 8000b58:	220c      	movs	r2, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000b5e:	f002 ff6b 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8000b68:	f000 f91e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <MX_TIM5_Init+0x100>)
 8000b6e:	f000 fa1d 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000b72:	bf00      	nop
 8000b74:	3738      	adds	r7, #56	@ 0x38
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200002a0 	.word	0x200002a0
 8000b80:	40000c00 	.word	0x40000c00

08000b84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART3_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART3_UART_Init+0x58>)
 8000bc8:	f003 fd66 	bl	8004698 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f000 f8e9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002ec 	.word	0x200002ec
 8000be0:	40004800 	.word	0x40004800

08000be4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	f001 fabd 	bl	80021a6 <HAL_PCD_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 f8b9 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000374 	.word	0x20000374

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b49      	ldr	r3, [pc, #292]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a48      	ldr	r2, [pc, #288]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b46      	ldr	r3, [pc, #280]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a42      	ldr	r2, [pc, #264]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b40      	ldr	r3, [pc, #256]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a3c      	ldr	r2, [pc, #240]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b3a      	ldr	r3, [pc, #232]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a36      	ldr	r2, [pc, #216]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <MX_GPIO_Init+0x154>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000cec:	482a      	ldr	r0, [pc, #168]	@ (8000d98 <MX_GPIO_Init+0x158>)
 8000cee:	f001 fa41 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2140      	movs	r1, #64	@ 0x40
 8000cf6:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <MX_GPIO_Init+0x15c>)
 8000cf8:	f001 fa3c 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <MX_GPIO_Init+0x160>)
 8000d14:	f001 f882 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d18:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <MX_GPIO_Init+0x158>)
 8000d32:	f001 f873 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	@ (8000da4 <MX_GPIO_Init+0x164>)
 8000d54:	f001 f862 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <MX_GPIO_Init+0x15c>)
 8000d70:	f001 f854 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d74:	2380      	movs	r3, #128	@ 0x80
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_GPIO_Init+0x15c>)
 8000d88:	f001 f848 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020c00 	.word	0x40020c00

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	4a08      	ldr	r2, [pc, #32]	@ (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_MspInit+0x44>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4e      	ldr	r2, [pc, #312]	@ (8000f54 <HAL_ETH_MspInit+0x158>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	f040 8096 	bne.w	8000f4c <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e20:	4b4d      	ldr	r3, [pc, #308]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a4c      	ldr	r2, [pc, #304]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e34:	623b      	str	r3, [r7, #32]
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	4b47      	ldr	r3, [pc, #284]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a46      	ldr	r2, [pc, #280]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e44:	4b44      	ldr	r3, [pc, #272]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	4b41      	ldr	r3, [pc, #260]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a40      	ldr	r2, [pc, #256]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	4b3b      	ldr	r3, [pc, #236]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b38      	ldr	r3, [pc, #224]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b35      	ldr	r3, [pc, #212]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a34      	ldr	r2, [pc, #208]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8c:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ec8:	2332      	movs	r3, #50	@ 0x32
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed8:	230b      	movs	r3, #11
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481e      	ldr	r0, [pc, #120]	@ (8000f5c <HAL_ETH_MspInit+0x160>)
 8000ee4:	f000 ff9a 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ee8:	2386      	movs	r3, #134	@ 0x86
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <HAL_ETH_MspInit+0x164>)
 8000f04:	f000 ff8a 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <HAL_ETH_MspInit+0x168>)
 8000f26:	f000 ff79 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f2a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <HAL_ETH_MspInit+0x16c>)
 8000f48:	f000 ff68 	bl	8001e1c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40028000 	.word	0x40028000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40021800 	.word	0x40021800

08000f6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x38>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10b      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40000c00 	.word	0x40000c00
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	@ (8001010 <HAL_TIM_MspPostInit+0x64>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11b      	bne.n	8001006 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_TIM_MspPostInit+0x68>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0/WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_TIM_MspPostInit+0x6c>)
 8001002:	f000 ff0b 	bl	8001e1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40000c00 	.word	0x40000c00
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ae      	sub	sp, #184	@ 0xb8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2290      	movs	r2, #144	@ 0x90
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f005 f9e3 	bl	8006408 <memset>
  if(huart->Instance==USART3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a26      	ldr	r2, [pc, #152]	@ (80010e0 <HAL_UART_MspInit+0xc4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d144      	bne.n	80010d6 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800104c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001050:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001052:	2300      	movs	r3, #0
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff12 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001066:	f7ff fe9f 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6413      	str	r3, [r2, #64]	@ 0x40
 8001076:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_UART_MspInit+0xc8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800109a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <HAL_UART_MspInit+0xcc>)
 80010c2:	f000 feab 	bl	8001e1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	2027      	movs	r0, #39	@ 0x27
 80010cc:	f000 fa8f 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010d0:	2027      	movs	r0, #39	@ 0x27
 80010d2:	f000 faa8 	bl	8001626 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80010d6:	bf00      	nop
 80010d8:	37b8      	adds	r7, #184	@ 0xb8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004800 	.word	0x40004800
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020c00 	.word	0x40020c00

080010ec <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ae      	sub	sp, #184	@ 0xb8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2290      	movs	r2, #144	@ 0x90
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f97b 	bl	8006408 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800111a:	d159      	bne.n	80011d0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800111c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001120:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fea9 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001138:	f7ff fe36 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	4a25      	ldr	r2, [pc, #148]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6313      	str	r3, [r2, #48]	@ 0x30
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001154:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800116e:	230a      	movs	r3, #10
 8001170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <HAL_PCD_MspInit+0xf0>)
 800117c:	f000 fe4e 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001198:	4619      	mov	r1, r3
 800119a:	4810      	ldr	r0, [pc, #64]	@ (80011dc <HAL_PCD_MspInit+0xf0>)
 800119c:	f000 fe3e 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	4a06      	ldr	r2, [pc, #24]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <HAL_PCD_MspInit+0xec>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	37b8      	adds	r7, #184	@ 0xb8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f8bb 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <USART3_IRQHandler+0x10>)
 8001246:	f003 fb43 	bl	80048d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002ec 	.word	0x200002ec

08001254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800125c:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <_sbrk+0x5c>)
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <_sbrk+0x60>)
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <_sbrk+0x64>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <_sbrk+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	429a      	cmp	r2, r3
 8001282:	d207      	bcs.n	8001294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001284:	f005 f8c8 	bl	8006418 <__errno>
 8001288:	4603      	mov	r3, r0
 800128a:	220c      	movs	r2, #12
 800128c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001292:	e009      	b.n	80012a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <_sbrk+0x64>)
 80012a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20080000 	.word	0x20080000
 80012b4:	00000400 	.word	0x00000400
 80012b8:	200008a0 	.word	0x200008a0
 80012bc:	200009f0 	.word	0x200009f0

080012c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800131c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	@ (8001324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	@ (8001330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001312:	f005 f887 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fa4f 	bl	80007b8 <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001328:	08007830 	.word	0x08007830
  ldr r2, =_sbss
 800132c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001330:	200009f0 	.word	0x200009f0

08001334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC_IRQHandler>

08001336 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f94c 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f805 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fd35 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f967 	bl	8001642 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800138c:	f000 f92f 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200008a4 	.word	0x200008a4

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200008a4 	.word	0x200008a4

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	4313      	orrs	r3, r2
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x40>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0000 	.word	0x05fa0000

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff3e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff8e 	bl	800152c <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5d 	bl	80014d8 <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff31 	bl	800149c <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff feb6 	bl	80013d8 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d008      	beq.n	800168c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e052      	b.n	8001732 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0216 	bic.w	r2, r2, #22
 800169a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <HAL_DMA_Abort+0x62>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0208 	bic.w	r2, r2, #8
 80016ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016dc:	e013      	b.n	8001706 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016de:	f7ff fe7b 	bl	80013d8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d90c      	bls.n	8001706 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2220      	movs	r2, #32
 80016f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e015      	b.n	8001732 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e4      	bne.n	80016de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	223f      	movs	r2, #63	@ 0x3f
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d004      	beq.n	8001758 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2280      	movs	r2, #128	@ 0x80
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00c      	b.n	8001772 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2205      	movs	r2, #5
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e086      	b.n	80018a0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2220      	movs	r2, #32
 80017a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fb29 	bl	8000dfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <HAL_ETH_Init+0x128>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a3e      	ldr	r2, [pc, #248]	@ (80018a8 <HAL_ETH_Init+0x128>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <HAL_ETH_Init+0x128>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <HAL_ETH_Init+0x12c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a39      	ldr	r2, [pc, #228]	@ (80018ac <HAL_ETH_Init+0x12c>)
 80017c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017cc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_ETH_Init+0x12c>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4935      	ldr	r1, [pc, #212]	@ (80018ac <HAL_ETH_Init+0x12c>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_ETH_Init+0x12c>)
 80017de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f8:	f7ff fdee 	bl	80013d8 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017fe:	e011      	b.n	8001824 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001800:	f7ff fdea 	bl	80013d8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800180e:	d909      	bls.n	8001824 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	22e0      	movs	r2, #224	@ 0xe0
 800181c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e03d      	b.n	80018a0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e4      	bne.n	8001800 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f97a 	bl	8001b30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fa25 	bl	8001c8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fa7b 	bl	8001d3e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	461a      	mov	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f9e3 	bl	8001c1c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_ETH_Init+0x130>)
 8001874:	430b      	orrs	r3, r1
 8001876:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800188a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2210      	movs	r2, #16
 800189a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	00020060 	.word	0x00020060

080018b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <ETH_SetMACConfig+0x164>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7b9b      	ldrb	r3, [r3, #14]
 80018d2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	7c12      	ldrb	r2, [r2, #16]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d102      	bne.n	80018e2 <ETH_SetMACConfig+0x2e>
 80018dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018e0:	e000      	b.n	80018e4 <ETH_SetMACConfig+0x30>
 80018e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80018e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	7c52      	ldrb	r2, [r2, #17]
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d102      	bne.n	80018f4 <ETH_SetMACConfig+0x40>
 80018ee:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018f2:	e000      	b.n	80018f6 <ETH_SetMACConfig+0x42>
 80018f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	7fdb      	ldrb	r3, [r3, #31]
 8001902:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001904:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800190a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	7f92      	ldrb	r2, [r2, #30]
 8001910:	2a00      	cmp	r2, #0
 8001912:	d102      	bne.n	800191a <ETH_SetMACConfig+0x66>
 8001914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001918:	e000      	b.n	800191c <ETH_SetMACConfig+0x68>
 800191a:	2200      	movs	r2, #0
                        macconf->Speed |
 800191c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7f1b      	ldrb	r3, [r3, #28]
 8001922:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001924:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800192a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	791b      	ldrb	r3, [r3, #4]
 8001930:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001932:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	f892 2020 	ldrb.w	r2, [r2, #32]
 800193a:	2a00      	cmp	r2, #0
 800193c:	d102      	bne.n	8001944 <ETH_SetMACConfig+0x90>
 800193e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001942:	e000      	b.n	8001946 <ETH_SetMACConfig+0x92>
 8001944:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001946:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	7bdb      	ldrb	r3, [r3, #15]
 800194c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800194e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001954:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800195c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800195e:	4313      	orrs	r3, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff fd3a 	bl	80013f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	d101      	bne.n	80019aa <ETH_SetMACConfig+0xf6>
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0xf8>
 80019aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80019ba:	2a01      	cmp	r2, #1
 80019bc:	d101      	bne.n	80019c2 <ETH_SetMACConfig+0x10e>
 80019be:	2208      	movs	r2, #8
 80019c0:	e000      	b.n	80019c4 <ETH_SetMACConfig+0x110>
 80019c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80019c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80019cc:	2a01      	cmp	r2, #1
 80019ce:	d101      	bne.n	80019d4 <ETH_SetMACConfig+0x120>
 80019d0:	2204      	movs	r2, #4
 80019d2:	e000      	b.n	80019d6 <ETH_SetMACConfig+0x122>
 80019d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80019de:	2a01      	cmp	r2, #1
 80019e0:	d101      	bne.n	80019e6 <ETH_SetMACConfig+0x132>
 80019e2:	2202      	movs	r2, #2
 80019e4:	e000      	b.n	80019e8 <ETH_SetMACConfig+0x134>
 80019e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019e8:	4313      	orrs	r3, r2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fcf5 	bl	80013f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	fd20810f 	.word	0xfd20810f

08001a1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <ETH_SetDMAConfig+0x110>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	7b1b      	ldrb	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <ETH_SetDMAConfig+0x2c>
 8001a42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a46:	e000      	b.n	8001a4a <ETH_SetDMAConfig+0x2e>
 8001a48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	7b5b      	ldrb	r3, [r3, #13]
 8001a4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	7f52      	ldrb	r2, [r2, #29]
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d102      	bne.n	8001a60 <ETH_SetDMAConfig+0x44>
 8001a5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a5e:	e000      	b.n	8001a62 <ETH_SetDMAConfig+0x46>
 8001a60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	7b9b      	ldrb	r3, [r3, #14]
 8001a68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7f9b      	ldrb	r3, [r3, #30]
 8001a7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff fc9c 	bl	80013f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	791b      	ldrb	r3, [r3, #4]
 8001aca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ad0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ad6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001adc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ae4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ae6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001af4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001afe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff fc6d 	bl	80013f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	f8de3f23 	.word	0xf8de3f23

08001b30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0a6      	sub	sp, #152	@ 0x98
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b72:	2300      	movs	r3, #0
 8001b74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001baa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe7f 	bl	80018b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bf0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff05 	bl	8001a1c <ETH_SetDMAConfig>
}
 8001c12:	bf00      	nop
 8001c14:	3798      	adds	r7, #152	@ 0x98
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3305      	adds	r3, #5
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	3204      	adds	r2, #4
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <ETH_MACAddressConfig+0x68>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3303      	adds	r3, #3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3302      	adds	r3, #2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4313      	orrs	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	7812      	ldrb	r2, [r2, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <ETH_MACAddressConfig+0x6c>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40028040 	.word	0x40028040
 8001c88:	40028044 	.word	0x40028044

08001c8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e03e      	b.n	8001d18 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	3206      	adds	r2, #6
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d80c      	bhi.n	8001cfc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	e004      	b.n	8001d06 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d9bd      	bls.n	8001c9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e048      	b.n	8001dde <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6919      	ldr	r1, [r3, #16]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001d88:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	3212      	adds	r2, #18
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d80c      	bhi.n	8001dce <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6919      	ldr	r1, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	e004      	b.n	8001dd8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d9b3      	bls.n	8001d4c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0e:	60da      	str	r2, [r3, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e175      	b.n	8002128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 8164 	bne.w	8002122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d005      	beq.n	8001e72 <HAL_GPIO_Init+0x56>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d017      	beq.n	8001f10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d123      	bne.n	8001f64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80be 	beq.w	8002122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a65      	ldr	r2, [pc, #404]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fbe:	4a61      	ldr	r2, [pc, #388]	@ (8002144 <HAL_GPIO_Init+0x328>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <HAL_GPIO_Init+0x32c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d037      	beq.n	800205a <HAL_GPIO_Init+0x23e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a57      	ldr	r2, [pc, #348]	@ (800214c <HAL_GPIO_Init+0x330>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d031      	beq.n	8002056 <HAL_GPIO_Init+0x23a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a56      	ldr	r2, [pc, #344]	@ (8002150 <HAL_GPIO_Init+0x334>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_GPIO_Init+0x236>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	@ (8002154 <HAL_GPIO_Init+0x338>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x232>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a54      	ldr	r2, [pc, #336]	@ (8002158 <HAL_GPIO_Init+0x33c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x22e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a53      	ldr	r2, [pc, #332]	@ (800215c <HAL_GPIO_Init+0x340>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x22a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	@ (8002160 <HAL_GPIO_Init+0x344>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a51      	ldr	r2, [pc, #324]	@ (8002164 <HAL_GPIO_Init+0x348>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a50      	ldr	r2, [pc, #320]	@ (8002168 <HAL_GPIO_Init+0x34c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4f      	ldr	r2, [pc, #316]	@ (800216c <HAL_GPIO_Init+0x350>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x21a>
 8002032:	2309      	movs	r3, #9
 8002034:	e012      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002036:	230a      	movs	r3, #10
 8002038:	e010      	b.n	800205c <HAL_GPIO_Init+0x240>
 800203a:	2308      	movs	r3, #8
 800203c:	e00e      	b.n	800205c <HAL_GPIO_Init+0x240>
 800203e:	2307      	movs	r3, #7
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002042:	2306      	movs	r3, #6
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x240>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x240>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x240>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	@ (8002144 <HAL_GPIO_Init+0x328>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <HAL_GPIO_Init+0x354>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a34      	ldr	r2, [pc, #208]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_GPIO_Init+0x354>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <HAL_GPIO_Init+0x354>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f ae86 	bls.w	8001e3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40021c00 	.word	0x40021c00
 8002168:	40022000 	.word	0x40022000
 800216c:	40022400 	.word	0x40022400
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e108      	b.n	80023ca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe ff8a 	bl	80010ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021e6:	d102      	bne.n	80021ee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fe1c 	bl	8005e30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7c1a      	ldrb	r2, [r3, #16]
 8002200:	f88d 2000 	strb.w	r2, [sp]
 8002204:	3304      	adds	r3, #4
 8002206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002208:	f003 fdb8 	bl	8005d7c <USB_CoreInit>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2202      	movs	r2, #2
 8002216:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0d5      	b.n	80023ca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f003 fe14 	bl	8005e52 <USB_SetCurrentMode>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0c6      	b.n	80023ca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e04a      	b.n	80022d8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3315      	adds	r3, #21
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3314      	adds	r3, #20
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	b298      	uxth	r0, r3
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	332e      	adds	r3, #46	@ 0x2e
 800227e:	4602      	mov	r2, r0
 8002280:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	3318      	adds	r3, #24
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	331c      	adds	r3, #28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3320      	adds	r3, #32
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3324      	adds	r3, #36	@ 0x24
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3301      	adds	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	791b      	ldrb	r3, [r3, #4]
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3af      	bcc.n	8002242 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e044      	b.n	8002372 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	3301      	adds	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3b5      	bcc.n	80022e8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7c1a      	ldrb	r2, [r3, #16]
 8002384:	f88d 2000 	strb.w	r2, [sp]
 8002388:	3304      	adds	r3, #4
 800238a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238c:	f003 fdae 	bl	8005eec <USB_DevInit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e013      	b.n	80023ca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f80b 	bl	80023d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 ff69 	bl	800629a <USB_DevDisconnect>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_PCDEx_ActivateLPM+0x44>)
 8002404:	4313      	orrs	r3, r2
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	10000003 	.word	0x10000003

0800241c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800245e:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1d      	ldr	r2, [pc, #116]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246a:	f7fe ffb5 	bl	80013d8 <HAL_GetTick>
 800246e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002470:	e009      	b.n	8002486 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002472:	f7fe ffb1 	bl	80013d8 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002480:	d901      	bls.n	8002486 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e022      	b.n	80024cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002486:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002492:	d1ee      	bne.n	8002472 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002494:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0f      	ldr	r2, [pc, #60]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800249a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a0:	f7fe ff9a 	bl	80013d8 <HAL_GetTick>
 80024a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024a6:	e009      	b.n	80024bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a8:	f7fe ff96 	bl	80013d8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b6:	d901      	bls.n	80024bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e007      	b.n	80024cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024c8:	d1ee      	bne.n	80024a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e29b      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b96      	ldr	r3, [pc, #600]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250c:	4b93      	ldr	r3, [pc, #588]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
 8002518:	4b90      	ldr	r3, [pc, #576]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b8d      	ldr	r3, [pc, #564]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x130>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e275      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x7a>
 8002548:	4b84      	ldr	r3, [pc, #528]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a83      	ldr	r2, [pc, #524]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x9c>
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b7c      	ldr	r3, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7b      	ldr	r2, [pc, #492]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xc0>
 8002582:	4b76      	ldr	r3, [pc, #472]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b73      	ldr	r3, [pc, #460]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a72      	ldr	r2, [pc, #456]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd8>
 800259c:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b6c      	ldr	r3, [pc, #432]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6b      	ldr	r2, [pc, #428]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe ff0c 	bl	80013d8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe ff08 	bl	80013d8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e229      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b61      	ldr	r3, [pc, #388]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fef8 	bl	80013d8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fef4 	bl	80013d8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e215      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x110>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d069      	beq.n	80026ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b50      	ldr	r3, [pc, #320]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b4d      	ldr	r3, [pc, #308]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
 8002632:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1e9      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	493d      	ldr	r1, [pc, #244]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e040      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe feaa 	bl	80013d8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fea6 	bl	80013d8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1c7      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4929      	ldr	r1, [pc, #164]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026bc:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fe86 	bl	80013d8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fe82 	bl	80013d8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1a3      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1e      	ldr	r3, [pc, #120]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d038      	beq.n	800276c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002706:	4a15      	ldr	r2, [pc, #84]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fe63 	bl	80013d8 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fe5f 	bl	80013d8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e180      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x23a>
 8002734:	e01a      	b.n	800276c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_RCC_OscConfig+0x280>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fe49 	bl	80013d8 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fe45 	bl	80013d8 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d903      	bls.n	8002760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e166      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
 800275c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b92      	ldr	r3, [pc, #584]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a4 	beq.w	80028c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b8c      	ldr	r3, [pc, #560]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b89      	ldr	r3, [pc, #548]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	4a88      	ldr	r2, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	@ 0x40
 8002792:	4b86      	ldr	r3, [pc, #536]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a2:	4b83      	ldr	r3, [pc, #524]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ae:	4b80      	ldr	r3, [pc, #512]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7f      	ldr	r2, [pc, #508]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fe0d 	bl	80013d8 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fe09 	bl	80013d8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	@ 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e12a      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x4d4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x31a>
 80027e8:	4b70      	ldr	r3, [pc, #448]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a6f      	ldr	r2, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x33c>
 80027fe:	4b6b      	ldr	r3, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	4a6a      	ldr	r2, [pc, #424]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	@ 0x70
 800280a:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	4a67      	ldr	r2, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6713      	str	r3, [r2, #112]	@ 0x70
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002820:	4b62      	ldr	r3, [pc, #392]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a61      	ldr	r2, [pc, #388]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
 800282c:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	4a5e      	ldr	r2, [pc, #376]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	@ 0x70
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
 800283a:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a5b      	ldr	r2, [pc, #364]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fdbd 	bl	80013d8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe fdb9 	bl	80013d8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0d8      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	4b4c      	ldr	r3, [pc, #304]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x386>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fda7 	bl	80013d8 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fda3 	bl	80013d8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0c2      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b41      	ldr	r3, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80ae 	beq.w	8002a28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d06d      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d14b      	bne.n	8002978 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a31      	ldr	r2, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80028e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fd74 	bl	80013d8 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fd70 	bl	80013d8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e091      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	071b      	lsls	r3, r3, #28
 800293e:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fd42 	bl	80013d8 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fd3e 	bl	80013d8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e05f      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x47c>
 8002976:	e057      	b.n	8002a28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0b      	ldr	r2, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fd28 	bl	80013d8 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe fd24 	bl	80013d8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e045      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x4b0>
 80029aa:	e03d      	b.n	8002a28 <HAL_RCC_OscConfig+0x54c>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <HAL_RCC_OscConfig+0x558>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d030      	beq.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d129      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d122      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d119      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d10f      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d0      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b6a      	ldr	r3, [pc, #424]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b67      	ldr	r3, [pc, #412]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 020f 	bic.w	r2, r3, #15
 8002a66:	4965      	ldr	r1, [pc, #404]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d040      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e073      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06b      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4936      	ldr	r1, [pc, #216]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fc54 	bl	80013d8 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fc50 	bl	80013d8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e053      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d210      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	4922      	ldr	r1, [pc, #136]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	@ (8002c04 <HAL_RCC_ClockConfig+0x1cc>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <HAL_RCC_ClockConfig+0x1d0>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x1d4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fbb0 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	080076b8 	.word	0x080076b8
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b094      	sub	sp, #80	@ 0x50
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c20:	2300      	movs	r3, #0
 8002c22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b79      	ldr	r3, [pc, #484]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80e1 	bhi.w	8002dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e0db      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b73      	ldr	r3, [pc, #460]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c48:	e0db      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b73      	ldr	r3, [pc, #460]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c4e:	e0d8      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c82:	4622      	mov	r2, r4
 8002c84:	462b      	mov	r3, r5
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c94:	0150      	lsls	r0, r2, #5
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	1a51      	subs	r1, r2, r1
 8002c9e:	6139      	str	r1, [r7, #16]
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	018b      	lsls	r3, r1, #6
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	018a      	lsls	r2, r1, #6
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc8:	4659      	mov	r1, fp
 8002cca:	eb63 0901 	sbc.w	r9, r3, r1
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce2:	4690      	mov	r8, r2
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	eb18 0303 	adds.w	r3, r8, r3
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	462b      	mov	r3, r5
 8002cf0:	eb49 0303 	adc.w	r3, r9, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d02:	4629      	mov	r1, r5
 8002d04:	024b      	lsls	r3, r1, #9
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	024a      	lsls	r2, r1, #9
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d20:	f7fd fae6 	bl	80002f0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d2c:	e058      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b38      	ldr	r3, [pc, #224]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	4611      	mov	r1, r2
 8002d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d48:	4642      	mov	r2, r8
 8002d4a:	464b      	mov	r3, r9
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	0159      	lsls	r1, r3, #5
 8002d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d5a:	0150      	lsls	r0, r2, #5
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4641      	mov	r1, r8
 8002d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d80:	ebb2 040a 	subs.w	r4, r2, sl
 8002d84:	eb63 050b 	sbc.w	r5, r3, fp
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	00eb      	lsls	r3, r5, #3
 8002d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d96:	00e2      	lsls	r2, r4, #3
 8002d98:	4614      	mov	r4, r2
 8002d9a:	461d      	mov	r5, r3
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	18e3      	adds	r3, r4, r3
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	464b      	mov	r3, r9
 8002da4:	eb45 0303 	adc.w	r3, r5, r3
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db6:	4629      	mov	r1, r5
 8002db8:	028b      	lsls	r3, r1, #10
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	028a      	lsls	r2, r1, #10
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	61fa      	str	r2, [r7, #28]
 8002dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd4:	f7fd fa8c 	bl	80002f0 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	3301      	adds	r3, #1
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3750      	adds	r7, #80	@ 0x50
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	00f42400 	.word	0x00f42400
 8002e18:	007a1200 	.word	0x007a1200

08002e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000

08002e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e38:	f7ff fff0 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0a9b      	lsrs	r3, r3, #10
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080076c8 	.word	0x080076c8

08002e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e60:	f7ff ffdc 	bl	8002e1c <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0b5b      	lsrs	r3, r3, #13
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080076c8 	.word	0x080076c8

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eac:	4b69      	ldr	r3, [pc, #420]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a68      	ldr	r2, [pc, #416]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002eb6:	6093      	str	r3, [r2, #8]
 8002eb8:	4b66      	ldr	r3, [pc, #408]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec0:	4964      	ldr	r1, [pc, #400]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d017      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ede:	4b5d      	ldr	r3, [pc, #372]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	4959      	ldr	r1, [pc, #356]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efc:	d101      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	494a      	ldr	r1, [pc, #296]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 808b 	beq.w	800307e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b3a      	ldr	r3, [pc, #232]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	4a39      	ldr	r2, [pc, #228]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f74:	4b37      	ldr	r3, [pc, #220]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f80:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a34      	ldr	r2, [pc, #208]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fa24 	bl	80013d8 <HAL_GetTick>
 8002f90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe fa20 	bl	80013d8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	@ 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e38f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d035      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d02e      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd0:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a1a      	ldr	r2, [pc, #104]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d114      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe f9e8 	bl	80013d8 <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe f9e4 	bl	80013d8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e351      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ee      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303a:	d111      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800304a:	400b      	ands	r3, r1
 800304c:	4901      	ldr	r1, [pc, #4]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
 8003052:	e00b      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000
 800305c:	0ffffcff 	.word	0x0ffffcff
 8003060:	4bac      	ldr	r3, [pc, #688]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4aab      	ldr	r2, [pc, #684]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800306a:	6093      	str	r3, [r2, #8]
 800306c:	4ba9      	ldr	r3, [pc, #676]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	49a6      	ldr	r1, [pc, #664]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307a:	4313      	orrs	r3, r2
 800307c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800308a:	4ba2      	ldr	r3, [pc, #648]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003090:	4aa0      	ldr	r2, [pc, #640]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003096:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800309a:	4b9e      	ldr	r3, [pc, #632]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	499b      	ldr	r1, [pc, #620]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b8:	4b96      	ldr	r3, [pc, #600]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c6:	4993      	ldr	r1, [pc, #588]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030da:	4b8e      	ldr	r3, [pc, #568]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030e8:	498a      	ldr	r1, [pc, #552]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fc:	4b85      	ldr	r3, [pc, #532]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310a:	4982      	ldr	r1, [pc, #520]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800311e:	4b7d      	ldr	r3, [pc, #500]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4979      	ldr	r1, [pc, #484]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003140:	4b74      	ldr	r3, [pc, #464]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f023 0203 	bic.w	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	4971      	ldr	r1, [pc, #452]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003162:	4b6c      	ldr	r3, [pc, #432]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	f023 020c 	bic.w	r2, r3, #12
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003170:	4968      	ldr	r1, [pc, #416]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003184:	4b63      	ldr	r3, [pc, #396]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003192:	4960      	ldr	r1, [pc, #384]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	4957      	ldr	r1, [pc, #348]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c8:	4b52      	ldr	r3, [pc, #328]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	494f      	ldr	r1, [pc, #316]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	4946      	ldr	r1, [pc, #280]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800320c:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003212:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	493e      	ldr	r1, [pc, #248]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800322e:	4b39      	ldr	r3, [pc, #228]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	4935      	ldr	r1, [pc, #212]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003250:	4b30      	ldr	r3, [pc, #192]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	492d      	ldr	r1, [pc, #180]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003272:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003280:	4924      	ldr	r1, [pc, #144]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800328c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003290:	d101      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b2:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c0:	4914      	ldr	r1, [pc, #80]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032e4:	490b      	ldr	r1, [pc, #44]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003308:	4902      	ldr	r1, [pc, #8]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003324:	4b8a      	ldr	r3, [pc, #552]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003334:	4986      	ldr	r1, [pc, #536]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003348:	4b81      	ldr	r3, [pc, #516]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003358:	497d      	ldr	r1, [pc, #500]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d006      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80d6 	beq.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003374:	4b76      	ldr	r3, [pc, #472]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a75      	ldr	r2, [pc, #468]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800337e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fe f82a 	bl	80013d8 <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003388:	f7fe f826 	bl	80013d8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e195      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800339a:	4b6d      	ldr	r3, [pc, #436]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d021      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d11d      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033ba:	4b65      	ldr	r3, [pc, #404]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033c8:	4b61      	ldr	r3, [pc, #388]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ce:	0e1b      	lsrs	r3, r3, #24
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	019a      	lsls	r2, r3, #6
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	4958      	ldr	r1, [pc, #352]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02e      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003420:	d129      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003422:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003430:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	0f1b      	lsrs	r3, r3, #28
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	019a      	lsls	r2, r3, #6
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	493e      	ldr	r1, [pc, #248]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800345e:	4b3c      	ldr	r3, [pc, #240]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003464:	f023 021f 	bic.w	r2, r3, #31
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	3b01      	subs	r3, #1
 800346e:	4938      	ldr	r1, [pc, #224]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01d      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003482:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003488:	0e1b      	lsrs	r3, r3, #24
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003490:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003496:	0f1b      	lsrs	r3, r3, #28
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	019a      	lsls	r2, r3, #6
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	4926      	ldr	r1, [pc, #152]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	019a      	lsls	r2, r3, #6
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	491a      	ldr	r1, [pc, #104]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fd ff6d 	bl	80013d8 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003502:	f7fd ff69 	bl	80013d8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	@ 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0d8      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003514:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	f040 80ce 	bne.w	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fd ff50 	bl	80013d8 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800353a:	e00b      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800353c:	f7fd ff4c 	bl	80013d8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d904      	bls.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0bb      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003554:	4b5e      	ldr	r3, [pc, #376]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800355c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003560:	d0ec      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d12a      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800358a:	4b51      	ldr	r3, [pc, #324]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003598:	4b4d      	ldr	r3, [pc, #308]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	0f1b      	lsrs	r3, r3, #28
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	019a      	lsls	r2, r3, #6
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	4944      	ldr	r1, [pc, #272]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035c6:	4b42      	ldr	r3, [pc, #264]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	493d      	ldr	r1, [pc, #244]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f4:	d11d      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035f6:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	0e1b      	lsrs	r3, r3, #24
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003604:	4b32      	ldr	r3, [pc, #200]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	0f1b      	lsrs	r3, r3, #28
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	019a      	lsls	r2, r3, #6
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	431a      	orrs	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	061b      	lsls	r3, r3, #24
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	071b      	lsls	r3, r3, #28
 800362a:	4929      	ldr	r1, [pc, #164]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	019a      	lsls	r2, r3, #6
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	4917      	ldr	r1, [pc, #92]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4911      	ldr	r1, [pc, #68]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0e      	ldr	r2, [pc, #56]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fe9c 	bl	80013d8 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036a4:	f7fd fe98 	bl	80013d8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	@ 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e007      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c2:	d1ef      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e049      	b.n	800377a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fc36 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fb6e 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e049      	b.n	8003828 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f841 	bl	8003830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fb17 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start+0x24>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e03c      	b.n	80038e2 <HAL_TIM_PWM_Start+0x9e>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d109      	bne.n	8003882 <HAL_TIM_PWM_Start+0x3e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e02f      	b.n	80038e2 <HAL_TIM_PWM_Start+0x9e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d109      	bne.n	800389c <HAL_TIM_PWM_Start+0x58>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e022      	b.n	80038e2 <HAL_TIM_PWM_Start+0x9e>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d109      	bne.n	80038b6 <HAL_TIM_PWM_Start+0x72>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	e015      	b.n	80038e2 <HAL_TIM_PWM_Start+0x9e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_PWM_Start+0x8c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e008      	b.n	80038e2 <HAL_TIM_PWM_Start+0x9e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	bf14      	ite	ne
 80038dc:	2301      	movne	r3, #1
 80038de:	2300      	moveq	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e092      	b.n	8003a10 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0xb6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038f8:	e023      	b.n	8003942 <HAL_TIM_PWM_Start+0xfe>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xc6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003908:	e01b      	b.n	8003942 <HAL_TIM_PWM_Start+0xfe>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Start+0xd6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003918:	e013      	b.n	8003942 <HAL_TIM_PWM_Start+0xfe>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b0c      	cmp	r3, #12
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0xe6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003928:	e00b      	b.n	8003942 <HAL_TIM_PWM_Start+0xfe>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b10      	cmp	r3, #16
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0xf6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	e003      	b.n	8003942 <HAL_TIM_PWM_Start+0xfe>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	6839      	ldr	r1, [r7, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fdf0 	bl	8004530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a30      	ldr	r2, [pc, #192]	@ (8003a18 <HAL_TIM_PWM_Start+0x1d4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_PWM_Start+0x120>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a1c <HAL_TIM_PWM_Start+0x1d8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_TIM_PWM_Start+0x124>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_TIM_PWM_Start+0x126>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a25      	ldr	r2, [pc, #148]	@ (8003a18 <HAL_TIM_PWM_Start+0x1d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d022      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003990:	d01d      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a22      	ldr	r2, [pc, #136]	@ (8003a20 <HAL_TIM_PWM_Start+0x1dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d018      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a20      	ldr	r2, [pc, #128]	@ (8003a24 <HAL_TIM_PWM_Start+0x1e0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003a28 <HAL_TIM_PWM_Start+0x1e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <HAL_TIM_PWM_Start+0x1d8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <HAL_TIM_PWM_Start+0x1e8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_TIM_PWM_Start+0x18a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a19      	ldr	r2, [pc, #100]	@ (8003a30 <HAL_TIM_PWM_Start+0x1ec>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d115      	bne.n	80039fa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <HAL_TIM_PWM_Start+0x1f0>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d015      	beq.n	8003a0c <HAL_TIM_PWM_Start+0x1c8>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e6:	d011      	beq.n	8003a0c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	e008      	b.n	8003a0c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40001800 	.word	0x40001800
 8003a34:	00010007 	.word	0x00010007

08003a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0ff      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b14      	cmp	r3, #20
 8003a62:	f200 80f0 	bhi.w	8003c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003c47 	.word	0x08003c47
 8003a74:	08003c47 	.word	0x08003c47
 8003a78:	08003c47 	.word	0x08003c47
 8003a7c:	08003b01 	.word	0x08003b01
 8003a80:	08003c47 	.word	0x08003c47
 8003a84:	08003c47 	.word	0x08003c47
 8003a88:	08003c47 	.word	0x08003c47
 8003a8c:	08003b43 	.word	0x08003b43
 8003a90:	08003c47 	.word	0x08003c47
 8003a94:	08003c47 	.word	0x08003c47
 8003a98:	08003c47 	.word	0x08003c47
 8003a9c:	08003b83 	.word	0x08003b83
 8003aa0:	08003c47 	.word	0x08003c47
 8003aa4:	08003c47 	.word	0x08003c47
 8003aa8:	08003c47 	.word	0x08003c47
 8003aac:	08003bc5 	.word	0x08003bc5
 8003ab0:	08003c47 	.word	0x08003c47
 8003ab4:	08003c47 	.word	0x08003c47
 8003ab8:	08003c47 	.word	0x08003c47
 8003abc:	08003c05 	.word	0x08003c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fa3a 	bl	8003f40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
      break;
 8003afe:	e0a5      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fa8c 	bl	8004024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
      break;
 8003b40:	e084      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fae3 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0208 	orr.w	r2, r2, #8
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
      break;
 8003b80:	e064      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb39 	bl	8004200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
      break;
 8003bc2:	e043      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fb70 	bl	80042b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c02:	e023      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fba2 	bl	8004354 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	021a      	lsls	r2, r3, #8
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c44:	e002      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIM_ConfigClockSource+0x1c>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e0b4      	b.n	8003de6 <HAL_TIM_ConfigClockSource+0x186>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	4b56      	ldr	r3, [pc, #344]	@ (8003df0 <HAL_TIM_ConfigClockSource+0x190>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d03e      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xd4>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cba:	f200 8087 	bhi.w	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc2:	f000 8086 	beq.w	8003dd2 <HAL_TIM_ConfigClockSource+0x172>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cca:	d87f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d01a      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xa6>
 8003cd0:	2b70      	cmp	r3, #112	@ 0x70
 8003cd2:	d87b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b60      	cmp	r3, #96	@ 0x60
 8003cd6:	d050      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x11a>
 8003cd8:	2b60      	cmp	r3, #96	@ 0x60
 8003cda:	d877      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b50      	cmp	r3, #80	@ 0x50
 8003cde:	d03c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xfa>
 8003ce0:	2b50      	cmp	r3, #80	@ 0x50
 8003ce2:	d873      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d058      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x13a>
 8003ce8:	2b40      	cmp	r3, #64	@ 0x40
 8003cea:	d86f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d064      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b30      	cmp	r3, #48	@ 0x30
 8003cf2:	d86b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d060      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d867      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d05a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	e062      	b.n	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d16:	f000 fbeb 	bl	80044f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	609a      	str	r2, [r3, #8]
      break;
 8003d32:	e04f      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	f000 fbd4 	bl	80044f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e03c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fb48 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2150      	movs	r1, #80	@ 0x50
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fba1 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003d78:	e02c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fb67 	bl	800445a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2160      	movs	r1, #96	@ 0x60
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb91 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003d98:	e01c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fb28 	bl	80043fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	@ 0x40
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb81 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 fb78 	bl	80044ba <TIM_ITRx_SetConfig>
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	fffeff88 	.word	0xfffeff88

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a43      	ldr	r2, [pc, #268]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a40      	ldr	r2, [pc, #256]	@ (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3e      	ldr	r2, [pc, #248]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	@ (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <TIM_Base_SetConfig+0x140>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xf2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a10      	ldr	r2, [pc, #64]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40010400 	.word	0x40010400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40001800 	.word	0x40001800
 8003f38:	40001c00 	.word	0x40001c00
 8003f3c:	40002000 	.word	0x40002000

08003f40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 0201 	bic.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <TIM_OC1_SetConfig+0xd8>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 0302 	bic.w	r3, r3, #2
 8003f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a21      	ldr	r2, [pc, #132]	@ (800401c <TIM_OC1_SetConfig+0xdc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC1_SetConfig+0x64>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a20      	ldr	r2, [pc, #128]	@ (8004020 <TIM_OC1_SetConfig+0xe0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10c      	bne.n	8003fbe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0308 	bic.w	r3, r3, #8
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a16      	ldr	r2, [pc, #88]	@ (800401c <TIM_OC1_SetConfig+0xdc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_OC1_SetConfig+0x8e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <TIM_OC1_SetConfig+0xe0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d111      	bne.n	8003ff2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	fffeff8f 	.word	0xfffeff8f
 800401c:	40010000 	.word	0x40010000
 8004020:	40010400 	.word	0x40010400

08004024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4b2e      	ldr	r3, [pc, #184]	@ (8004108 <TIM_OC2_SetConfig+0xe4>)
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a23      	ldr	r2, [pc, #140]	@ (800410c <TIM_OC2_SetConfig+0xe8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_OC2_SetConfig+0x68>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a22      	ldr	r2, [pc, #136]	@ (8004110 <TIM_OC2_SetConfig+0xec>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <TIM_OC2_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_OC2_SetConfig+0x94>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <TIM_OC2_SetConfig+0xec>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d113      	bne.n	80040e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	feff8fff 	.word	0xfeff8fff
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <TIM_OC3_SetConfig+0xe0>)
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a22      	ldr	r2, [pc, #136]	@ (80041f8 <TIM_OC3_SetConfig+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC3_SetConfig+0x66>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a21      	ldr	r2, [pc, #132]	@ (80041fc <TIM_OC3_SetConfig+0xe8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10d      	bne.n	8004196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a17      	ldr	r2, [pc, #92]	@ (80041f8 <TIM_OC3_SetConfig+0xe4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_OC3_SetConfig+0x92>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a16      	ldr	r2, [pc, #88]	@ (80041fc <TIM_OC3_SetConfig+0xe8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d113      	bne.n	80041ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	fffeff8f 	.word	0xfffeff8f
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40010400 	.word	0x40010400

08004200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <TIM_OC4_SetConfig+0xa4>)
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800424a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	031b      	lsls	r3, r3, #12
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a13      	ldr	r2, [pc, #76]	@ (80042a8 <TIM_OC4_SetConfig+0xa8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC4_SetConfig+0x68>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <TIM_OC4_SetConfig+0xac>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800426e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	feff8fff 	.word	0xfeff8fff
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <TIM_OC5_SetConfig+0x98>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80042f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a12      	ldr	r2, [pc, #72]	@ (800434c <TIM_OC5_SetConfig+0x9c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC5_SetConfig+0x5e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <TIM_OC5_SetConfig+0xa0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d109      	bne.n	8004322 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	fffeff8f 	.word	0xfffeff8f
 800434c:	40010000 	.word	0x40010000
 8004350:	40010400 	.word	0x40010400

08004354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4b1c      	ldr	r3, [pc, #112]	@ (80043f0 <TIM_OC6_SetConfig+0x9c>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	051b      	lsls	r3, r3, #20
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <TIM_OC6_SetConfig+0xa0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_OC6_SetConfig+0x60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a12      	ldr	r2, [pc, #72]	@ (80043f8 <TIM_OC6_SetConfig+0xa4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d109      	bne.n	80043c8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	feff8fff 	.word	0xfeff8fff
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400

080043fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 030a 	bic.w	r3, r3, #10
 8004438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	f023 0210 	bic.w	r2, r3, #16
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	031b      	lsls	r3, r3, #12
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004496:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f043 0307 	orr.w	r3, r3, #7
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800450a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	431a      	orrs	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2201      	movs	r2, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e06d      	b.n	8004670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a30      	ldr	r2, [pc, #192]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a20      	ldr	r2, [pc, #128]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d01d      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1a      	ldr	r2, [pc, #104]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a16      	ldr	r2, [pc, #88]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10c      	bne.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40010000 	.word	0x40010000
 8004680:	40010400 	.word	0x40010400
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e040      	b.n	800472c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fcae 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	@ 0x24
 80046c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fe86 	bl	80053f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fc1f 	bl	8004f28 <UART_SetConfig>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e01b      	b.n	800472c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 ff05 	bl	8005534 <UART_CheckIdleState>
 800472a:	4603      	mov	r3, r0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004748:	2b20      	cmp	r3, #32
 800474a:	d177      	bne.n	800483c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UART_Transmit+0x24>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e070      	b.n	800483e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2221      	movs	r2, #33	@ 0x21
 8004768:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800476a:	f7fc fe35 	bl	80013d8 <HAL_GetTick>
 800476e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004788:	d108      	bne.n	800479c <HAL_UART_Transmit+0x68>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e003      	b.n	80047a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047a4:	e02f      	b.n	8004806 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2180      	movs	r1, #128	@ 0x80
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 ff67 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e03b      	b.n	800483e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	3302      	adds	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e007      	b.n	80047f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1c9      	bne.n	80047a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2140      	movs	r1, #64	@ 0x40
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 ff31 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e005      	b.n	800483e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b08a      	sub	sp, #40	@ 0x28
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	4613      	mov	r3, r2
 8004852:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485a:	2b20      	cmp	r3, #32
 800485c:	d132      	bne.n	80048c4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_Receive_IT+0x24>
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e02b      	b.n	80048c6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d018      	beq.n	80048b4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	613b      	str	r3, [r7, #16]
   return(result);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	623b      	str	r3, [r7, #32]
 80048a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	69f9      	ldr	r1, [r7, #28]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e6      	bne.n	8004882 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	461a      	mov	r2, r3
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 ff50 	bl	8005760 <UART_Start_Receive_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	e000      	b.n	80048c6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	@ 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b0ba      	sub	sp, #232	@ 0xe8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80048fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80048fe:	4013      	ands	r3, r2
 8004900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d115      	bne.n	8004938 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00f      	beq.n	8004938 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 82c6 	beq.w	8004eba <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
      }
      return;
 8004936:	e2c0      	b.n	8004eba <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8117 	beq.w	8004b70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800494e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004952:	4b85      	ldr	r3, [pc, #532]	@ (8004b68 <HAL_UART_IRQHandler+0x298>)
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 810a 	beq.w	8004b70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d011      	beq.n	800498c <HAL_UART_IRQHandler+0xbc>
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d011      	beq.n	80049bc <HAL_UART_IRQHandler+0xec>
 8004998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2202      	movs	r2, #2
 80049aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b2:	f043 0204 	orr.w	r2, r3, #4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d011      	beq.n	80049ec <HAL_UART_IRQHandler+0x11c>
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2204      	movs	r2, #4
 80049da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e2:	f043 0202 	orr.w	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2208      	movs	r2, #8
 8004a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d012      	beq.n	8004a5a <HAL_UART_IRQHandler+0x18a>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00c      	beq.n	8004a5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 822c 	beq.w	8004ebe <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	d005      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d04f      	beq.n	8004b52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 ff1a 	bl	80058ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac2:	2b40      	cmp	r3, #64	@ 0x40
 8004ac4:	d141      	bne.n	8004b4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1d9      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <HAL_UART_IRQHandler+0x29c>)
 8004b20:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fc fe07 	bl	800173a <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d017      	beq.n	8004b62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	e00f      	b.n	8004b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f9d0 	bl	8004ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	e00b      	b.n	8004b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9cc 	bl	8004ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	e007      	b.n	8004b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9c8 	bl	8004ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004b60:	e1ad      	b.n	8004ebe <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b62:	bf00      	nop
    return;
 8004b64:	e1ab      	b.n	8004ebe <HAL_UART_IRQHandler+0x5ee>
 8004b66:	bf00      	nop
 8004b68:	04000120 	.word	0x04000120
 8004b6c:	080059b5 	.word	0x080059b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 8166 	bne.w	8004e46 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 815f 	beq.w	8004e46 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8158 	beq.w	8004e46 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	f040 80d0 	bne.w	8004d4e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80ab 	beq.w	8004d1a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	f080 80a3 	bcs.w	8004d1a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be8:	f000 8086 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1da      	bne.n	8004bec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e1      	bne.n	8004c36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3308      	adds	r3, #8
 8004c78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3308      	adds	r3, #8
 8004c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e3      	bne.n	8004c72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cc8:	f023 0310 	bic.w	r3, r3, #16
 8004ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e4      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fc fcb1 	bl	800165a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8f2 	bl	8004efc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d18:	e0d3      	b.n	8004ec2 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d24:	429a      	cmp	r2, r3
 8004d26:	f040 80cc 	bne.w	8004ec2 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d34:	f040 80c5 	bne.w	8004ec2 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8d8 	bl	8004efc <HAL_UARTEx_RxEventCallback>
      return;
 8004d4c:	e0b9      	b.n	8004ec2 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80ab 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8004d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a6 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e4      	bne.n	8004d7a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dd4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e3      	bne.n	8004db0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e4      	bne.n	8004dfc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f85c 	bl	8004efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e44:	e03f      	b.n	8004ec6 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00e      	beq.n	8004e70 <HAL_UART_IRQHandler+0x5a0>
 8004e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f853 	bl	8004f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e6e:	e02d      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01c      	beq.n	8004eca <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
    }
    return;
 8004e98:	e017      	b.n	8004eca <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d012      	beq.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fd90 	bl	80059d8 <UART_EndTransmit_IT>
    return;
 8004eb8:	e008      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
      return;
 8004eba:	bf00      	nop
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
    return;
 8004ebe:	bf00      	nop
 8004ec0:	e004      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
      return;
 8004ec2:	bf00      	nop
 8004ec4:	e002      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
      return;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_IRQHandler+0x5fc>
    return;
 8004eca:	bf00      	nop
  }

}
 8004ecc:	37e8      	adds	r7, #232	@ 0xe8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop

08004ed4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4ba6      	ldr	r3, [pc, #664]	@ (80051ec <UART_SetConfig+0x2c4>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a94      	ldr	r2, [pc, #592]	@ (80051f0 <UART_SetConfig+0x2c8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d120      	bne.n	8004fe6 <UART_SetConfig+0xbe>
 8004fa4:	4b93      	ldr	r3, [pc, #588]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d816      	bhi.n	8004fe0 <UART_SetConfig+0xb8>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0x90>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd5 	.word	0x08004fd5
 8004fc0:	08004fcf 	.word	0x08004fcf
 8004fc4:	08004fdb 	.word	0x08004fdb
 8004fc8:	2301      	movs	r3, #1
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e150      	b.n	8005270 <UART_SetConfig+0x348>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e14d      	b.n	8005270 <UART_SetConfig+0x348>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e14a      	b.n	8005270 <UART_SetConfig+0x348>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e147      	b.n	8005270 <UART_SetConfig+0x348>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e144      	b.n	8005270 <UART_SetConfig+0x348>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a83      	ldr	r2, [pc, #524]	@ (80051f8 <UART_SetConfig+0x2d0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d132      	bne.n	8005056 <UART_SetConfig+0x12e>
 8004ff0:	4b80      	ldr	r3, [pc, #512]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d828      	bhi.n	8005050 <UART_SetConfig+0x128>
 8004ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <UART_SetConfig+0xdc>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	08005039 	.word	0x08005039
 8005008:	08005051 	.word	0x08005051
 800500c:	08005051 	.word	0x08005051
 8005010:	08005051 	.word	0x08005051
 8005014:	08005045 	.word	0x08005045
 8005018:	08005051 	.word	0x08005051
 800501c:	08005051 	.word	0x08005051
 8005020:	08005051 	.word	0x08005051
 8005024:	0800503f 	.word	0x0800503f
 8005028:	08005051 	.word	0x08005051
 800502c:	08005051 	.word	0x08005051
 8005030:	08005051 	.word	0x08005051
 8005034:	0800504b 	.word	0x0800504b
 8005038:	2300      	movs	r3, #0
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e118      	b.n	8005270 <UART_SetConfig+0x348>
 800503e:	2302      	movs	r3, #2
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e115      	b.n	8005270 <UART_SetConfig+0x348>
 8005044:	2304      	movs	r3, #4
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e112      	b.n	8005270 <UART_SetConfig+0x348>
 800504a:	2308      	movs	r3, #8
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e10f      	b.n	8005270 <UART_SetConfig+0x348>
 8005050:	2310      	movs	r3, #16
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e10c      	b.n	8005270 <UART_SetConfig+0x348>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a68      	ldr	r2, [pc, #416]	@ (80051fc <UART_SetConfig+0x2d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d120      	bne.n	80050a2 <UART_SetConfig+0x17a>
 8005060:	4b64      	ldr	r3, [pc, #400]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800506a:	2b30      	cmp	r3, #48	@ 0x30
 800506c:	d013      	beq.n	8005096 <UART_SetConfig+0x16e>
 800506e:	2b30      	cmp	r3, #48	@ 0x30
 8005070:	d814      	bhi.n	800509c <UART_SetConfig+0x174>
 8005072:	2b20      	cmp	r3, #32
 8005074:	d009      	beq.n	800508a <UART_SetConfig+0x162>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d810      	bhi.n	800509c <UART_SetConfig+0x174>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0x15c>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d006      	beq.n	8005090 <UART_SetConfig+0x168>
 8005082:	e00b      	b.n	800509c <UART_SetConfig+0x174>
 8005084:	2300      	movs	r3, #0
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e0f2      	b.n	8005270 <UART_SetConfig+0x348>
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e0ef      	b.n	8005270 <UART_SetConfig+0x348>
 8005090:	2304      	movs	r3, #4
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e0ec      	b.n	8005270 <UART_SetConfig+0x348>
 8005096:	2308      	movs	r3, #8
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e0e9      	b.n	8005270 <UART_SetConfig+0x348>
 800509c:	2310      	movs	r3, #16
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e0e6      	b.n	8005270 <UART_SetConfig+0x348>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a56      	ldr	r2, [pc, #344]	@ (8005200 <UART_SetConfig+0x2d8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d120      	bne.n	80050ee <UART_SetConfig+0x1c6>
 80050ac:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b8:	d013      	beq.n	80050e2 <UART_SetConfig+0x1ba>
 80050ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80050bc:	d814      	bhi.n	80050e8 <UART_SetConfig+0x1c0>
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d009      	beq.n	80050d6 <UART_SetConfig+0x1ae>
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d810      	bhi.n	80050e8 <UART_SetConfig+0x1c0>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <UART_SetConfig+0x1a8>
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d006      	beq.n	80050dc <UART_SetConfig+0x1b4>
 80050ce:	e00b      	b.n	80050e8 <UART_SetConfig+0x1c0>
 80050d0:	2300      	movs	r3, #0
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e0cc      	b.n	8005270 <UART_SetConfig+0x348>
 80050d6:	2302      	movs	r3, #2
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e0c9      	b.n	8005270 <UART_SetConfig+0x348>
 80050dc:	2304      	movs	r3, #4
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e0c6      	b.n	8005270 <UART_SetConfig+0x348>
 80050e2:	2308      	movs	r3, #8
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e0c3      	b.n	8005270 <UART_SetConfig+0x348>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e0c0      	b.n	8005270 <UART_SetConfig+0x348>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a44      	ldr	r2, [pc, #272]	@ (8005204 <UART_SetConfig+0x2dc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d125      	bne.n	8005144 <UART_SetConfig+0x21c>
 80050f8:	4b3e      	ldr	r3, [pc, #248]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005106:	d017      	beq.n	8005138 <UART_SetConfig+0x210>
 8005108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510c:	d817      	bhi.n	800513e <UART_SetConfig+0x216>
 800510e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005112:	d00b      	beq.n	800512c <UART_SetConfig+0x204>
 8005114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005118:	d811      	bhi.n	800513e <UART_SetConfig+0x216>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <UART_SetConfig+0x1fe>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005122:	d006      	beq.n	8005132 <UART_SetConfig+0x20a>
 8005124:	e00b      	b.n	800513e <UART_SetConfig+0x216>
 8005126:	2300      	movs	r3, #0
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e0a1      	b.n	8005270 <UART_SetConfig+0x348>
 800512c:	2302      	movs	r3, #2
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e09e      	b.n	8005270 <UART_SetConfig+0x348>
 8005132:	2304      	movs	r3, #4
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e09b      	b.n	8005270 <UART_SetConfig+0x348>
 8005138:	2308      	movs	r3, #8
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e098      	b.n	8005270 <UART_SetConfig+0x348>
 800513e:	2310      	movs	r3, #16
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e095      	b.n	8005270 <UART_SetConfig+0x348>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2f      	ldr	r2, [pc, #188]	@ (8005208 <UART_SetConfig+0x2e0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d125      	bne.n	800519a <UART_SetConfig+0x272>
 800514e:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800515c:	d017      	beq.n	800518e <UART_SetConfig+0x266>
 800515e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005162:	d817      	bhi.n	8005194 <UART_SetConfig+0x26c>
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005168:	d00b      	beq.n	8005182 <UART_SetConfig+0x25a>
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516e:	d811      	bhi.n	8005194 <UART_SetConfig+0x26c>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x254>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005178:	d006      	beq.n	8005188 <UART_SetConfig+0x260>
 800517a:	e00b      	b.n	8005194 <UART_SetConfig+0x26c>
 800517c:	2301      	movs	r3, #1
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e076      	b.n	8005270 <UART_SetConfig+0x348>
 8005182:	2302      	movs	r3, #2
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e073      	b.n	8005270 <UART_SetConfig+0x348>
 8005188:	2304      	movs	r3, #4
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e070      	b.n	8005270 <UART_SetConfig+0x348>
 800518e:	2308      	movs	r3, #8
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e06d      	b.n	8005270 <UART_SetConfig+0x348>
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e06a      	b.n	8005270 <UART_SetConfig+0x348>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <UART_SetConfig+0x2e4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d138      	bne.n	8005216 <UART_SetConfig+0x2ee>
 80051a4:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <UART_SetConfig+0x2cc>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b2:	d017      	beq.n	80051e4 <UART_SetConfig+0x2bc>
 80051b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b8:	d82a      	bhi.n	8005210 <UART_SetConfig+0x2e8>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d00b      	beq.n	80051d8 <UART_SetConfig+0x2b0>
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c4:	d824      	bhi.n	8005210 <UART_SetConfig+0x2e8>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <UART_SetConfig+0x2aa>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ce:	d006      	beq.n	80051de <UART_SetConfig+0x2b6>
 80051d0:	e01e      	b.n	8005210 <UART_SetConfig+0x2e8>
 80051d2:	2300      	movs	r3, #0
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e04b      	b.n	8005270 <UART_SetConfig+0x348>
 80051d8:	2302      	movs	r3, #2
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e048      	b.n	8005270 <UART_SetConfig+0x348>
 80051de:	2304      	movs	r3, #4
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e045      	b.n	8005270 <UART_SetConfig+0x348>
 80051e4:	2308      	movs	r3, #8
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e042      	b.n	8005270 <UART_SetConfig+0x348>
 80051ea:	bf00      	nop
 80051ec:	efff69f3 	.word	0xefff69f3
 80051f0:	40011000 	.word	0x40011000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40004400 	.word	0x40004400
 80051fc:	40004800 	.word	0x40004800
 8005200:	40004c00 	.word	0x40004c00
 8005204:	40005000 	.word	0x40005000
 8005208:	40011400 	.word	0x40011400
 800520c:	40007800 	.word	0x40007800
 8005210:	2310      	movs	r3, #16
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e02c      	b.n	8005270 <UART_SetConfig+0x348>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a72      	ldr	r2, [pc, #456]	@ (80053e4 <UART_SetConfig+0x4bc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d125      	bne.n	800526c <UART_SetConfig+0x344>
 8005220:	4b71      	ldr	r3, [pc, #452]	@ (80053e8 <UART_SetConfig+0x4c0>)
 8005222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005226:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800522a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800522e:	d017      	beq.n	8005260 <UART_SetConfig+0x338>
 8005230:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005234:	d817      	bhi.n	8005266 <UART_SetConfig+0x33e>
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523a:	d00b      	beq.n	8005254 <UART_SetConfig+0x32c>
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005240:	d811      	bhi.n	8005266 <UART_SetConfig+0x33e>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <UART_SetConfig+0x326>
 8005246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524a:	d006      	beq.n	800525a <UART_SetConfig+0x332>
 800524c:	e00b      	b.n	8005266 <UART_SetConfig+0x33e>
 800524e:	2300      	movs	r3, #0
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e00d      	b.n	8005270 <UART_SetConfig+0x348>
 8005254:	2302      	movs	r3, #2
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e00a      	b.n	8005270 <UART_SetConfig+0x348>
 800525a:	2304      	movs	r3, #4
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e007      	b.n	8005270 <UART_SetConfig+0x348>
 8005260:	2308      	movs	r3, #8
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e004      	b.n	8005270 <UART_SetConfig+0x348>
 8005266:	2310      	movs	r3, #16
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e001      	b.n	8005270 <UART_SetConfig+0x348>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005278:	d15b      	bne.n	8005332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800527a:	7ffb      	ldrb	r3, [r7, #31]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d828      	bhi.n	80052d2 <UART_SetConfig+0x3aa>
 8005280:	a201      	add	r2, pc, #4	@ (adr r2, 8005288 <UART_SetConfig+0x360>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7fd fdc2 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7fd fdd2 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b4b      	ldr	r3, [pc, #300]	@ (80053ec <UART_SetConfig+0x4c4>)
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fd fca5 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 80052c6:	61b8      	str	r0, [r7, #24]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77bb      	strb	r3, [r7, #30]
        break;
 80052da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d074      	beq.n	80053cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d916      	bls.n	800532c <UART_SetConfig+0x404>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005304:	d212      	bcs.n	800532c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f023 030f 	bic.w	r3, r3, #15
 800530e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	b29a      	uxth	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	4313      	orrs	r3, r2
 8005320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	89fa      	ldrh	r2, [r7, #14]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	e04f      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	77bb      	strb	r3, [r7, #30]
 8005330:	e04c      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005332:	7ffb      	ldrb	r3, [r7, #31]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d828      	bhi.n	800538a <UART_SetConfig+0x462>
 8005338:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <UART_SetConfig+0x418>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005365 	.word	0x08005365
 8005344:	0800536d 	.word	0x0800536d
 8005348:	08005375 	.word	0x08005375
 800534c:	0800538b 	.word	0x0800538b
 8005350:	0800537b 	.word	0x0800537b
 8005354:	0800538b 	.word	0x0800538b
 8005358:	0800538b 	.word	0x0800538b
 800535c:	0800538b 	.word	0x0800538b
 8005360:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005364:	f7fd fd66 	bl	8002e34 <HAL_RCC_GetPCLK1Freq>
 8005368:	61b8      	str	r0, [r7, #24]
        break;
 800536a:	e013      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800536c:	f7fd fd76 	bl	8002e5c <HAL_RCC_GetPCLK2Freq>
 8005370:	61b8      	str	r0, [r7, #24]
        break;
 8005372:	e00f      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b1d      	ldr	r3, [pc, #116]	@ (80053ec <UART_SetConfig+0x4c4>)
 8005376:	61bb      	str	r3, [r7, #24]
        break;
 8005378:	e00c      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7fd fc49 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 800537e:	61b8      	str	r0, [r7, #24]
        break;
 8005380:	e008      	b.n	8005394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005386:	61bb      	str	r3, [r7, #24]
        break;
 8005388:	e004      	b.n	8005394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	77bb      	strb	r3, [r7, #30]
        break;
 8005392:	bf00      	nop
    }

    if (pclk != 0U)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d018      	beq.n	80053cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085a      	lsrs	r2, r3, #1
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	441a      	add	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d909      	bls.n	80053c8 <UART_SetConfig+0x4a0>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ba:	d205      	bcs.n	80053c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e001      	b.n	80053cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40007c00 	.word	0x40007c00
 80053e8:	40023800 	.word	0x40023800
 80053ec:	00f42400 	.word	0x00f42400

080053f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01a      	beq.n	8005506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ee:	d10a      	bne.n	8005506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b098      	sub	sp, #96	@ 0x60
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005544:	f7fb ff48 	bl	80013d8 <HAL_GetTick>
 8005548:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d12e      	bne.n	80055b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f88c 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d021      	beq.n	80055b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005586:	653b      	str	r3, [r7, #80]	@ 0x50
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005590:	647b      	str	r3, [r7, #68]	@ 0x44
 8005592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800559e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e062      	b.n	800567c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d149      	bne.n	8005658 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f856 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03c      	beq.n	8005658 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	623b      	str	r3, [r7, #32]
   return(result);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005630:	61fa      	str	r2, [r7, #28]
 8005632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69b9      	ldr	r1, [r7, #24]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	617b      	str	r3, [r7, #20]
   return(result);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e011      	b.n	800567c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3758      	adds	r7, #88	@ 0x58
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	e04f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569c:	d04b      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fb fe9b 	bl	80013d8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e04e      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d037      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b80      	cmp	r3, #128	@ 0x80
 80056ca:	d034      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d031      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d110      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2208      	movs	r2, #8
 80056e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f8ff 	bl	80058ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2208      	movs	r2, #8
 80056f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e029      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005710:	d111      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f8e5 	bl	80058ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e00f      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d0a0      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005760:	b480      	push	{r7}
 8005762:	b097      	sub	sp, #92	@ 0x5c
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005792:	d10e      	bne.n	80057b2 <UART_Start_Receive_IT+0x52>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d105      	bne.n	80057a8 <UART_Start_Receive_IT+0x48>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80057a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057a6:	e02d      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057b0:	e028      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <UART_Start_Receive_IT+0x76>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <UART_Start_Receive_IT+0x6c>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22ff      	movs	r2, #255	@ 0xff
 80057c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057ca:	e01b      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	227f      	movs	r2, #127	@ 0x7f
 80057d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057d4:	e016      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057de:	d10d      	bne.n	80057fc <UART_Start_Receive_IT+0x9c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <UART_Start_Receive_IT+0x92>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	227f      	movs	r2, #127	@ 0x7f
 80057ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057f0:	e008      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	223f      	movs	r2, #63	@ 0x3f
 80057f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80057fa:	e003      	b.n	8005804 <UART_Start_Receive_IT+0xa4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2222      	movs	r2, #34	@ 0x22
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	657b      	str	r3, [r7, #84]	@ 0x54
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005834:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005836:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800583a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005850:	d107      	bne.n	8005862 <UART_Start_Receive_IT+0x102>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4a21      	ldr	r2, [pc, #132]	@ (80058e4 <UART_Start_Receive_IT+0x184>)
 800585e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005860:	e002      	b.n	8005868 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a20      	ldr	r2, [pc, #128]	@ (80058e8 <UART_Start_Receive_IT+0x188>)
 8005866:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d019      	beq.n	80058a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005890:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_Start_Receive_IT+0x110>
 80058a2:	e018      	b.n	80058d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	613b      	str	r3, [r7, #16]
   return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f043 0320 	orr.w	r3, r3, #32
 80058b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	69f9      	ldr	r1, [r7, #28]
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e6      	bne.n	80058a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	375c      	adds	r7, #92	@ 0x5c
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	08005bd5 	.word	0x08005bd5
 80058e8:	08005a2d 	.word	0x08005a2d

080058ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b095      	sub	sp, #84	@ 0x54
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005912:	643b      	str	r3, [r7, #64]	@ 0x40
 8005914:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005918:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e6      	bne.n	80058f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	61fb      	str	r3, [r7, #28]
   return(result);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800594c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800595e:	2b01      	cmp	r3, #1
 8005960:	d118      	bne.n	8005994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	647b      	str	r3, [r7, #68]	@ 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6979      	ldr	r1, [r7, #20]
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	613b      	str	r3, [r7, #16]
   return(result);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059a8:	bf00      	nop
 80059aa:	3754      	adds	r7, #84	@ 0x54
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fa8c 	bl	8004ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6979      	ldr	r1, [r7, #20]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fa58 	bl	8004ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b09c      	sub	sp, #112	@ 0x70
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a44:	2b22      	cmp	r3, #34	@ 0x22
 8005a46:	f040 80b9 	bne.w	8005bbc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005a58:	b2d9      	uxtb	r1, r3
 8005a5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a64:	400a      	ands	r2, r1
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 809c 	bne.w	8005bcc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ab4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d018      	beq.n	8005b4e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e6      	bne.n	8005b1c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d12e      	bne.n	8005bb4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f023 0310 	bic.w	r3, r3, #16
 8005b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	617b      	str	r3, [r7, #20]
   return(result);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e6      	bne.n	8005b5c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d103      	bne.n	8005ba4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff f9a5 	bl	8004efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bb2:	e00b      	b.n	8005bcc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fa fda9 	bl	800070c <HAL_UART_RxCpltCallback>
}
 8005bba:	e007      	b.n	8005bcc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0208 	orr.w	r2, r2, #8
 8005bca:	619a      	str	r2, [r3, #24]
}
 8005bcc:	bf00      	nop
 8005bce:	3770      	adds	r7, #112	@ 0x70
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b09c      	sub	sp, #112	@ 0x70
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005be2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bec:	2b22      	cmp	r3, #34	@ 0x22
 8005bee:	f040 80b9 	bne.w	8005d64 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005c06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 809c 	bne.w	8005d74 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e6      	bne.n	8005c3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e5      	bne.n	8005c6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d018      	beq.n	8005cf6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d12e      	bne.n	8005d5c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d103      	bne.n	8005d4c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2210      	movs	r2, #16
 8005d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff f8d1 	bl	8004efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d5a:	e00b      	b.n	8005d74 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fa fcd5 	bl	800070c <HAL_UART_RxCpltCallback>
}
 8005d62:	e007      	b.n	8005d74 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0208 	orr.w	r2, r2, #8
 8005d72:	619a      	str	r2, [r3, #24]
}
 8005d74:	bf00      	nop
 8005d76:	3770      	adds	r7, #112	@ 0x70
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	f107 001c 	add.w	r0, r7, #28
 8005d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d121      	bne.n	8005dda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	4b21      	ldr	r3, [pc, #132]	@ (8005e2c <USB_CoreInit+0xb0>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d105      	bne.n	8005dce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa92 	bl	80062f8 <USB_CoreReset>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
 8005dd8:	e010      	b.n	8005dfc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa86 	bl	80062f8 <USB_CoreReset>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005dfc:	7fbb      	ldrb	r3, [r7, #30]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d10b      	bne.n	8005e1a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f043 0206 	orr.w	r2, r3, #6
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e26:	b004      	add	sp, #16
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	ffbdffbf 	.word	0xffbdffbf

08005e30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f023 0201 	bic.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d115      	bne.n	8005ea0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e80:	200a      	movs	r0, #10
 8005e82:	f7fb fab5 	bl	80013f0 <HAL_Delay>
      ms += 10U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	330a      	adds	r3, #10
 8005e8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa25 	bl	80062dc <USB_GetMode>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d01e      	beq.n	8005ed6 <USB_SetCurrentMode+0x84>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e9c:	d9f0      	bls.n	8005e80 <USB_SetCurrentMode+0x2e>
 8005e9e:	e01a      	b.n	8005ed6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d115      	bne.n	8005ed2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eb2:	200a      	movs	r0, #10
 8005eb4:	f7fb fa9c 	bl	80013f0 <HAL_Delay>
      ms += 10U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	330a      	adds	r3, #10
 8005ebc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa0c 	bl	80062dc <USB_GetMode>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USB_SetCurrentMode+0x84>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ece:	d9f0      	bls.n	8005eb2 <USB_SetCurrentMode+0x60>
 8005ed0:	e001      	b.n	8005ed6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e005      	b.n	8005ee2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005eda:	d101      	bne.n	8005ee0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eec:	b084      	sub	sp, #16
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e009      	b.n	8005f20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3340      	adds	r3, #64	@ 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b0e      	cmp	r3, #14
 8005f24:	d9f2      	bls.n	8005f0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11c      	bne.n	8005f68 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e005      	b.n	8005f74 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10d      	bne.n	8005fa4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f968 	bl	8006268 <USB_SetDevSpeed>
 8005f98:	e008      	b.n	8005fac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f963 	bl	8006268 <USB_SetDevSpeed>
 8005fa2:	e003      	b.n	8005fac <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f95e 	bl	8006268 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fac:	2110      	movs	r1, #16
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8fa 	bl	80061a8 <USB_FlushTxFifo>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f924 	bl	800620c <USB_FlushRxFifo>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006084:	461a      	mov	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4293      	cmp	r3, r2
 800608a:	d3b5      	bcc.n	8005ff8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	e043      	b.n	800611a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a8:	d118      	bne.n	80060dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e013      	b.n	80060ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e008      	b.n	80060ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800611e:	461a      	mov	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4293      	cmp	r3, r2
 8006124:	d3b5      	bcc.n	8006092 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006138:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006146:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f043 0210 	orr.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <USB_DevInit+0x2b4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006168:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f043 0208 	orr.w	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800617c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <USB_DevInit+0x2b8>)
 800618a:	4313      	orrs	r3, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800619c:	b004      	add	sp, #16
 800619e:	4770      	bx	lr
 80061a0:	803c3800 	.word	0x803c3800
 80061a4:	40000004 	.word	0x40000004

080061a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c2:	d901      	bls.n	80061c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e01b      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	daf2      	bge.n	80061b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	019b      	lsls	r3, r3, #6
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ec:	d901      	bls.n	80061f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e006      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d0f0      	beq.n	80061e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006224:	d901      	bls.n	800622a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e018      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	daf2      	bge.n	8006218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2210      	movs	r2, #16
 800623a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006248:	d901      	bls.n	800624e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e006      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b10      	cmp	r3, #16
 8006258:	d0f0      	beq.n	800623c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c8:	f043 0302 	orr.w	r3, r3, #2
 80062cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	f003 0301 	and.w	r3, r3, #1
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006310:	d901      	bls.n	8006316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e022      	b.n	800635c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	daf2      	bge.n	8006304 <USB_CoreReset+0xc>

  count = 10U;
 800631e:	230a      	movs	r3, #10
 8006320:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006322:	e002      	b.n	800632a <USB_CoreReset+0x32>
  {
    count--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3b01      	subs	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f9      	bne.n	8006324 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f043 0201 	orr.w	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006348:	d901      	bls.n	800634e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e006      	b.n	800635c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d0f0      	beq.n	800633c <USB_CoreReset+0x44>

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <siprintf>:
 8006368:	b40e      	push	{r1, r2, r3}
 800636a:	b510      	push	{r4, lr}
 800636c:	b09d      	sub	sp, #116	@ 0x74
 800636e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006370:	9002      	str	r0, [sp, #8]
 8006372:	9006      	str	r0, [sp, #24]
 8006374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006378:	480a      	ldr	r0, [pc, #40]	@ (80063a4 <siprintf+0x3c>)
 800637a:	9107      	str	r1, [sp, #28]
 800637c:	9104      	str	r1, [sp, #16]
 800637e:	490a      	ldr	r1, [pc, #40]	@ (80063a8 <siprintf+0x40>)
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	2400      	movs	r4, #0
 8006388:	a902      	add	r1, sp, #8
 800638a:	6800      	ldr	r0, [r0, #0]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006390:	f000 f9c2 	bl	8006718 <_svfiprintf_r>
 8006394:	9b02      	ldr	r3, [sp, #8]
 8006396:	701c      	strb	r4, [r3, #0]
 8006398:	b01d      	add	sp, #116	@ 0x74
 800639a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639e:	b003      	add	sp, #12
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000000c 	.word	0x2000000c
 80063a8:	ffff0208 	.word	0xffff0208

080063ac <siscanf>:
 80063ac:	b40e      	push	{r1, r2, r3}
 80063ae:	b570      	push	{r4, r5, r6, lr}
 80063b0:	b09d      	sub	sp, #116	@ 0x74
 80063b2:	ac21      	add	r4, sp, #132	@ 0x84
 80063b4:	2500      	movs	r5, #0
 80063b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80063ba:	f854 6b04 	ldr.w	r6, [r4], #4
 80063be:	f8ad 2014 	strh.w	r2, [sp, #20]
 80063c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80063c4:	9002      	str	r0, [sp, #8]
 80063c6:	9006      	str	r0, [sp, #24]
 80063c8:	f7f9 ff3a 	bl	8000240 <strlen>
 80063cc:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <siscanf+0x50>)
 80063ce:	9003      	str	r0, [sp, #12]
 80063d0:	9007      	str	r0, [sp, #28]
 80063d2:	480b      	ldr	r0, [pc, #44]	@ (8006400 <siscanf+0x54>)
 80063d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80063de:	4632      	mov	r2, r6
 80063e0:	4623      	mov	r3, r4
 80063e2:	a902      	add	r1, sp, #8
 80063e4:	6800      	ldr	r0, [r0, #0]
 80063e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80063e8:	9514      	str	r5, [sp, #80]	@ 0x50
 80063ea:	9401      	str	r4, [sp, #4]
 80063ec:	f000 faea 	bl	80069c4 <__ssvfiscanf_r>
 80063f0:	b01d      	add	sp, #116	@ 0x74
 80063f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063f6:	b003      	add	sp, #12
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	08006405 	.word	0x08006405
 8006400:	2000000c 	.word	0x2000000c

08006404 <__seofread>:
 8006404:	2000      	movs	r0, #0
 8006406:	4770      	bx	lr

08006408 <memset>:
 8006408:	4402      	add	r2, r0
 800640a:	4603      	mov	r3, r0
 800640c:	4293      	cmp	r3, r2
 800640e:	d100      	bne.n	8006412 <memset+0xa>
 8006410:	4770      	bx	lr
 8006412:	f803 1b01 	strb.w	r1, [r3], #1
 8006416:	e7f9      	b.n	800640c <memset+0x4>

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	@ (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	2000000c 	.word	0x2000000c

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	4d0d      	ldr	r5, [pc, #52]	@ (800645c <__libc_init_array+0x38>)
 8006428:	4c0d      	ldr	r4, [pc, #52]	@ (8006460 <__libc_init_array+0x3c>)
 800642a:	1b64      	subs	r4, r4, r5
 800642c:	10a4      	asrs	r4, r4, #2
 800642e:	2600      	movs	r6, #0
 8006430:	42a6      	cmp	r6, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	4d0b      	ldr	r5, [pc, #44]	@ (8006464 <__libc_init_array+0x40>)
 8006436:	4c0c      	ldr	r4, [pc, #48]	@ (8006468 <__libc_init_array+0x44>)
 8006438:	f001 f8e2 	bl	8007600 <_init>
 800643c:	1b64      	subs	r4, r4, r5
 800643e:	10a4      	asrs	r4, r4, #2
 8006440:	2600      	movs	r6, #0
 8006442:	42a6      	cmp	r6, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	f855 3b04 	ldr.w	r3, [r5], #4
 800644c:	4798      	blx	r3
 800644e:	3601      	adds	r6, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	f855 3b04 	ldr.w	r3, [r5], #4
 8006456:	4798      	blx	r3
 8006458:	3601      	adds	r6, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	08007828 	.word	0x08007828
 8006460:	08007828 	.word	0x08007828
 8006464:	08007828 	.word	0x08007828
 8006468:	0800782c 	.word	0x0800782c

0800646c <__retarget_lock_acquire_recursive>:
 800646c:	4770      	bx	lr

0800646e <__retarget_lock_release_recursive>:
 800646e:	4770      	bx	lr

08006470 <_free_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4605      	mov	r5, r0
 8006474:	2900      	cmp	r1, #0
 8006476:	d041      	beq.n	80064fc <_free_r+0x8c>
 8006478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647c:	1f0c      	subs	r4, r1, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb8      	it	lt
 8006482:	18e4      	addlt	r4, r4, r3
 8006484:	f000 f8e0 	bl	8006648 <__malloc_lock>
 8006488:	4a1d      	ldr	r2, [pc, #116]	@ (8006500 <_free_r+0x90>)
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	b933      	cbnz	r3, 800649c <_free_r+0x2c>
 800648e:	6063      	str	r3, [r4, #4]
 8006490:	6014      	str	r4, [r2, #0]
 8006492:	4628      	mov	r0, r5
 8006494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006498:	f000 b8dc 	b.w	8006654 <__malloc_unlock>
 800649c:	42a3      	cmp	r3, r4
 800649e:	d908      	bls.n	80064b2 <_free_r+0x42>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	1821      	adds	r1, r4, r0
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf01      	itttt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	1809      	addeq	r1, r1, r0
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	e7ed      	b.n	800648e <_free_r+0x1e>
 80064b2:	461a      	mov	r2, r3
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	b10b      	cbz	r3, 80064bc <_free_r+0x4c>
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d9fa      	bls.n	80064b2 <_free_r+0x42>
 80064bc:	6811      	ldr	r1, [r2, #0]
 80064be:	1850      	adds	r0, r2, r1
 80064c0:	42a0      	cmp	r0, r4
 80064c2:	d10b      	bne.n	80064dc <_free_r+0x6c>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	4401      	add	r1, r0
 80064c8:	1850      	adds	r0, r2, r1
 80064ca:	4283      	cmp	r3, r0
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	d1e0      	bne.n	8006492 <_free_r+0x22>
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	6053      	str	r3, [r2, #4]
 80064d6:	4408      	add	r0, r1
 80064d8:	6010      	str	r0, [r2, #0]
 80064da:	e7da      	b.n	8006492 <_free_r+0x22>
 80064dc:	d902      	bls.n	80064e4 <_free_r+0x74>
 80064de:	230c      	movs	r3, #12
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	e7d6      	b.n	8006492 <_free_r+0x22>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	1821      	adds	r1, r4, r0
 80064e8:	428b      	cmp	r3, r1
 80064ea:	bf04      	itt	eq
 80064ec:	6819      	ldreq	r1, [r3, #0]
 80064ee:	685b      	ldreq	r3, [r3, #4]
 80064f0:	6063      	str	r3, [r4, #4]
 80064f2:	bf04      	itt	eq
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	6054      	str	r4, [r2, #4]
 80064fa:	e7ca      	b.n	8006492 <_free_r+0x22>
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	200009ec 	.word	0x200009ec

08006504 <sbrk_aligned>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4e0f      	ldr	r6, [pc, #60]	@ (8006544 <sbrk_aligned+0x40>)
 8006508:	460c      	mov	r4, r1
 800650a:	6831      	ldr	r1, [r6, #0]
 800650c:	4605      	mov	r5, r0
 800650e:	b911      	cbnz	r1, 8006516 <sbrk_aligned+0x12>
 8006510:	f000 ff36 	bl	8007380 <_sbrk_r>
 8006514:	6030      	str	r0, [r6, #0]
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 ff31 	bl	8007380 <_sbrk_r>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d103      	bne.n	800652a <sbrk_aligned+0x26>
 8006522:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006526:	4620      	mov	r0, r4
 8006528:	bd70      	pop	{r4, r5, r6, pc}
 800652a:	1cc4      	adds	r4, r0, #3
 800652c:	f024 0403 	bic.w	r4, r4, #3
 8006530:	42a0      	cmp	r0, r4
 8006532:	d0f8      	beq.n	8006526 <sbrk_aligned+0x22>
 8006534:	1a21      	subs	r1, r4, r0
 8006536:	4628      	mov	r0, r5
 8006538:	f000 ff22 	bl	8007380 <_sbrk_r>
 800653c:	3001      	adds	r0, #1
 800653e:	d1f2      	bne.n	8006526 <sbrk_aligned+0x22>
 8006540:	e7ef      	b.n	8006522 <sbrk_aligned+0x1e>
 8006542:	bf00      	nop
 8006544:	200009e8 	.word	0x200009e8

08006548 <_malloc_r>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	1ccd      	adds	r5, r1, #3
 800654e:	f025 0503 	bic.w	r5, r5, #3
 8006552:	3508      	adds	r5, #8
 8006554:	2d0c      	cmp	r5, #12
 8006556:	bf38      	it	cc
 8006558:	250c      	movcc	r5, #12
 800655a:	2d00      	cmp	r5, #0
 800655c:	4606      	mov	r6, r0
 800655e:	db01      	blt.n	8006564 <_malloc_r+0x1c>
 8006560:	42a9      	cmp	r1, r5
 8006562:	d904      	bls.n	800656e <_malloc_r+0x26>
 8006564:	230c      	movs	r3, #12
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	2000      	movs	r0, #0
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006644 <_malloc_r+0xfc>
 8006572:	f000 f869 	bl	8006648 <__malloc_lock>
 8006576:	f8d8 3000 	ldr.w	r3, [r8]
 800657a:	461c      	mov	r4, r3
 800657c:	bb44      	cbnz	r4, 80065d0 <_malloc_r+0x88>
 800657e:	4629      	mov	r1, r5
 8006580:	4630      	mov	r0, r6
 8006582:	f7ff ffbf 	bl	8006504 <sbrk_aligned>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	4604      	mov	r4, r0
 800658a:	d158      	bne.n	800663e <_malloc_r+0xf6>
 800658c:	f8d8 4000 	ldr.w	r4, [r8]
 8006590:	4627      	mov	r7, r4
 8006592:	2f00      	cmp	r7, #0
 8006594:	d143      	bne.n	800661e <_malloc_r+0xd6>
 8006596:	2c00      	cmp	r4, #0
 8006598:	d04b      	beq.n	8006632 <_malloc_r+0xea>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	4639      	mov	r1, r7
 800659e:	4630      	mov	r0, r6
 80065a0:	eb04 0903 	add.w	r9, r4, r3
 80065a4:	f000 feec 	bl	8007380 <_sbrk_r>
 80065a8:	4581      	cmp	r9, r0
 80065aa:	d142      	bne.n	8006632 <_malloc_r+0xea>
 80065ac:	6821      	ldr	r1, [r4, #0]
 80065ae:	1a6d      	subs	r5, r5, r1
 80065b0:	4629      	mov	r1, r5
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff ffa6 	bl	8006504 <sbrk_aligned>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d03a      	beq.n	8006632 <_malloc_r+0xea>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	442b      	add	r3, r5
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	f8d8 3000 	ldr.w	r3, [r8]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	bb62      	cbnz	r2, 8006624 <_malloc_r+0xdc>
 80065ca:	f8c8 7000 	str.w	r7, [r8]
 80065ce:	e00f      	b.n	80065f0 <_malloc_r+0xa8>
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	1b52      	subs	r2, r2, r5
 80065d4:	d420      	bmi.n	8006618 <_malloc_r+0xd0>
 80065d6:	2a0b      	cmp	r2, #11
 80065d8:	d917      	bls.n	800660a <_malloc_r+0xc2>
 80065da:	1961      	adds	r1, r4, r5
 80065dc:	42a3      	cmp	r3, r4
 80065de:	6025      	str	r5, [r4, #0]
 80065e0:	bf18      	it	ne
 80065e2:	6059      	strne	r1, [r3, #4]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	bf08      	it	eq
 80065e8:	f8c8 1000 	streq.w	r1, [r8]
 80065ec:	5162      	str	r2, [r4, r5]
 80065ee:	604b      	str	r3, [r1, #4]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f82f 	bl	8006654 <__malloc_unlock>
 80065f6:	f104 000b 	add.w	r0, r4, #11
 80065fa:	1d23      	adds	r3, r4, #4
 80065fc:	f020 0007 	bic.w	r0, r0, #7
 8006600:	1ac2      	subs	r2, r0, r3
 8006602:	bf1c      	itt	ne
 8006604:	1a1b      	subne	r3, r3, r0
 8006606:	50a3      	strne	r3, [r4, r2]
 8006608:	e7af      	b.n	800656a <_malloc_r+0x22>
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	42a3      	cmp	r3, r4
 800660e:	bf0c      	ite	eq
 8006610:	f8c8 2000 	streq.w	r2, [r8]
 8006614:	605a      	strne	r2, [r3, #4]
 8006616:	e7eb      	b.n	80065f0 <_malloc_r+0xa8>
 8006618:	4623      	mov	r3, r4
 800661a:	6864      	ldr	r4, [r4, #4]
 800661c:	e7ae      	b.n	800657c <_malloc_r+0x34>
 800661e:	463c      	mov	r4, r7
 8006620:	687f      	ldr	r7, [r7, #4]
 8006622:	e7b6      	b.n	8006592 <_malloc_r+0x4a>
 8006624:	461a      	mov	r2, r3
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	42a3      	cmp	r3, r4
 800662a:	d1fb      	bne.n	8006624 <_malloc_r+0xdc>
 800662c:	2300      	movs	r3, #0
 800662e:	6053      	str	r3, [r2, #4]
 8006630:	e7de      	b.n	80065f0 <_malloc_r+0xa8>
 8006632:	230c      	movs	r3, #12
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	4630      	mov	r0, r6
 8006638:	f000 f80c 	bl	8006654 <__malloc_unlock>
 800663c:	e794      	b.n	8006568 <_malloc_r+0x20>
 800663e:	6005      	str	r5, [r0, #0]
 8006640:	e7d6      	b.n	80065f0 <_malloc_r+0xa8>
 8006642:	bf00      	nop
 8006644:	200009ec 	.word	0x200009ec

08006648 <__malloc_lock>:
 8006648:	4801      	ldr	r0, [pc, #4]	@ (8006650 <__malloc_lock+0x8>)
 800664a:	f7ff bf0f 	b.w	800646c <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	200009e4 	.word	0x200009e4

08006654 <__malloc_unlock>:
 8006654:	4801      	ldr	r0, [pc, #4]	@ (800665c <__malloc_unlock+0x8>)
 8006656:	f7ff bf0a 	b.w	800646e <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	200009e4 	.word	0x200009e4

08006660 <__ssputs_r>:
 8006660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	688e      	ldr	r6, [r1, #8]
 8006666:	461f      	mov	r7, r3
 8006668:	42be      	cmp	r6, r7
 800666a:	680b      	ldr	r3, [r1, #0]
 800666c:	4682      	mov	sl, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4690      	mov	r8, r2
 8006672:	d82d      	bhi.n	80066d0 <__ssputs_r+0x70>
 8006674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800667c:	d026      	beq.n	80066cc <__ssputs_r+0x6c>
 800667e:	6965      	ldr	r5, [r4, #20]
 8006680:	6909      	ldr	r1, [r1, #16]
 8006682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006686:	eba3 0901 	sub.w	r9, r3, r1
 800668a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800668e:	1c7b      	adds	r3, r7, #1
 8006690:	444b      	add	r3, r9
 8006692:	106d      	asrs	r5, r5, #1
 8006694:	429d      	cmp	r5, r3
 8006696:	bf38      	it	cc
 8006698:	461d      	movcc	r5, r3
 800669a:	0553      	lsls	r3, r2, #21
 800669c:	d527      	bpl.n	80066ee <__ssputs_r+0x8e>
 800669e:	4629      	mov	r1, r5
 80066a0:	f7ff ff52 	bl	8006548 <_malloc_r>
 80066a4:	4606      	mov	r6, r0
 80066a6:	b360      	cbz	r0, 8006702 <__ssputs_r+0xa2>
 80066a8:	6921      	ldr	r1, [r4, #16]
 80066aa:	464a      	mov	r2, r9
 80066ac:	f000 fe78 	bl	80073a0 <memcpy>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	6126      	str	r6, [r4, #16]
 80066be:	6165      	str	r5, [r4, #20]
 80066c0:	444e      	add	r6, r9
 80066c2:	eba5 0509 	sub.w	r5, r5, r9
 80066c6:	6026      	str	r6, [r4, #0]
 80066c8:	60a5      	str	r5, [r4, #8]
 80066ca:	463e      	mov	r6, r7
 80066cc:	42be      	cmp	r6, r7
 80066ce:	d900      	bls.n	80066d2 <__ssputs_r+0x72>
 80066d0:	463e      	mov	r6, r7
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	4632      	mov	r2, r6
 80066d6:	4641      	mov	r1, r8
 80066d8:	f000 fe37 	bl	800734a <memmove>
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	1b9b      	subs	r3, r3, r6
 80066e0:	60a3      	str	r3, [r4, #8]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	4433      	add	r3, r6
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	2000      	movs	r0, #0
 80066ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ee:	462a      	mov	r2, r5
 80066f0:	f000 fe64 	bl	80073bc <_realloc_r>
 80066f4:	4606      	mov	r6, r0
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d1e0      	bne.n	80066bc <__ssputs_r+0x5c>
 80066fa:	6921      	ldr	r1, [r4, #16]
 80066fc:	4650      	mov	r0, sl
 80066fe:	f7ff feb7 	bl	8006470 <_free_r>
 8006702:	230c      	movs	r3, #12
 8006704:	f8ca 3000 	str.w	r3, [sl]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006714:	e7e9      	b.n	80066ea <__ssputs_r+0x8a>
	...

08006718 <_svfiprintf_r>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4698      	mov	r8, r3
 800671e:	898b      	ldrh	r3, [r1, #12]
 8006720:	061b      	lsls	r3, r3, #24
 8006722:	b09d      	sub	sp, #116	@ 0x74
 8006724:	4607      	mov	r7, r0
 8006726:	460d      	mov	r5, r1
 8006728:	4614      	mov	r4, r2
 800672a:	d510      	bpl.n	800674e <_svfiprintf_r+0x36>
 800672c:	690b      	ldr	r3, [r1, #16]
 800672e:	b973      	cbnz	r3, 800674e <_svfiprintf_r+0x36>
 8006730:	2140      	movs	r1, #64	@ 0x40
 8006732:	f7ff ff09 	bl	8006548 <_malloc_r>
 8006736:	6028      	str	r0, [r5, #0]
 8006738:	6128      	str	r0, [r5, #16]
 800673a:	b930      	cbnz	r0, 800674a <_svfiprintf_r+0x32>
 800673c:	230c      	movs	r3, #12
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006744:	b01d      	add	sp, #116	@ 0x74
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	2340      	movs	r3, #64	@ 0x40
 800674c:	616b      	str	r3, [r5, #20]
 800674e:	2300      	movs	r3, #0
 8006750:	9309      	str	r3, [sp, #36]	@ 0x24
 8006752:	2320      	movs	r3, #32
 8006754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006758:	f8cd 800c 	str.w	r8, [sp, #12]
 800675c:	2330      	movs	r3, #48	@ 0x30
 800675e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80068fc <_svfiprintf_r+0x1e4>
 8006762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006766:	f04f 0901 	mov.w	r9, #1
 800676a:	4623      	mov	r3, r4
 800676c:	469a      	mov	sl, r3
 800676e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006772:	b10a      	cbz	r2, 8006778 <_svfiprintf_r+0x60>
 8006774:	2a25      	cmp	r2, #37	@ 0x25
 8006776:	d1f9      	bne.n	800676c <_svfiprintf_r+0x54>
 8006778:	ebba 0b04 	subs.w	fp, sl, r4
 800677c:	d00b      	beq.n	8006796 <_svfiprintf_r+0x7e>
 800677e:	465b      	mov	r3, fp
 8006780:	4622      	mov	r2, r4
 8006782:	4629      	mov	r1, r5
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff ff6b 	bl	8006660 <__ssputs_r>
 800678a:	3001      	adds	r0, #1
 800678c:	f000 80a7 	beq.w	80068de <_svfiprintf_r+0x1c6>
 8006790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006792:	445a      	add	r2, fp
 8006794:	9209      	str	r2, [sp, #36]	@ 0x24
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 809f 	beq.w	80068de <_svfiprintf_r+0x1c6>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067aa:	f10a 0a01 	add.w	sl, sl, #1
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	9307      	str	r3, [sp, #28]
 80067b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80067b8:	4654      	mov	r4, sl
 80067ba:	2205      	movs	r2, #5
 80067bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067c0:	484e      	ldr	r0, [pc, #312]	@ (80068fc <_svfiprintf_r+0x1e4>)
 80067c2:	f7f9 fd45 	bl	8000250 <memchr>
 80067c6:	9a04      	ldr	r2, [sp, #16]
 80067c8:	b9d8      	cbnz	r0, 8006802 <_svfiprintf_r+0xea>
 80067ca:	06d0      	lsls	r0, r2, #27
 80067cc:	bf44      	itt	mi
 80067ce:	2320      	movmi	r3, #32
 80067d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067d4:	0711      	lsls	r1, r2, #28
 80067d6:	bf44      	itt	mi
 80067d8:	232b      	movmi	r3, #43	@ 0x2b
 80067da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067de:	f89a 3000 	ldrb.w	r3, [sl]
 80067e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067e4:	d015      	beq.n	8006812 <_svfiprintf_r+0xfa>
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	4654      	mov	r4, sl
 80067ea:	2000      	movs	r0, #0
 80067ec:	f04f 0c0a 	mov.w	ip, #10
 80067f0:	4621      	mov	r1, r4
 80067f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067f6:	3b30      	subs	r3, #48	@ 0x30
 80067f8:	2b09      	cmp	r3, #9
 80067fa:	d94b      	bls.n	8006894 <_svfiprintf_r+0x17c>
 80067fc:	b1b0      	cbz	r0, 800682c <_svfiprintf_r+0x114>
 80067fe:	9207      	str	r2, [sp, #28]
 8006800:	e014      	b.n	800682c <_svfiprintf_r+0x114>
 8006802:	eba0 0308 	sub.w	r3, r0, r8
 8006806:	fa09 f303 	lsl.w	r3, r9, r3
 800680a:	4313      	orrs	r3, r2
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	46a2      	mov	sl, r4
 8006810:	e7d2      	b.n	80067b8 <_svfiprintf_r+0xa0>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	1d19      	adds	r1, r3, #4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	9103      	str	r1, [sp, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfbb      	ittet	lt
 800681e:	425b      	neglt	r3, r3
 8006820:	f042 0202 	orrlt.w	r2, r2, #2
 8006824:	9307      	strge	r3, [sp, #28]
 8006826:	9307      	strlt	r3, [sp, #28]
 8006828:	bfb8      	it	lt
 800682a:	9204      	strlt	r2, [sp, #16]
 800682c:	7823      	ldrb	r3, [r4, #0]
 800682e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006830:	d10a      	bne.n	8006848 <_svfiprintf_r+0x130>
 8006832:	7863      	ldrb	r3, [r4, #1]
 8006834:	2b2a      	cmp	r3, #42	@ 0x2a
 8006836:	d132      	bne.n	800689e <_svfiprintf_r+0x186>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	9203      	str	r2, [sp, #12]
 8006840:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006844:	3402      	adds	r4, #2
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800690c <_svfiprintf_r+0x1f4>
 800684c:	7821      	ldrb	r1, [r4, #0]
 800684e:	2203      	movs	r2, #3
 8006850:	4650      	mov	r0, sl
 8006852:	f7f9 fcfd 	bl	8000250 <memchr>
 8006856:	b138      	cbz	r0, 8006868 <_svfiprintf_r+0x150>
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	eba0 000a 	sub.w	r0, r0, sl
 800685e:	2240      	movs	r2, #64	@ 0x40
 8006860:	4082      	lsls	r2, r0
 8006862:	4313      	orrs	r3, r2
 8006864:	3401      	adds	r4, #1
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686c:	4824      	ldr	r0, [pc, #144]	@ (8006900 <_svfiprintf_r+0x1e8>)
 800686e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006872:	2206      	movs	r2, #6
 8006874:	f7f9 fcec 	bl	8000250 <memchr>
 8006878:	2800      	cmp	r0, #0
 800687a:	d036      	beq.n	80068ea <_svfiprintf_r+0x1d2>
 800687c:	4b21      	ldr	r3, [pc, #132]	@ (8006904 <_svfiprintf_r+0x1ec>)
 800687e:	bb1b      	cbnz	r3, 80068c8 <_svfiprintf_r+0x1b0>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	3307      	adds	r3, #7
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	3308      	adds	r3, #8
 800688a:	9303      	str	r3, [sp, #12]
 800688c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688e:	4433      	add	r3, r6
 8006890:	9309      	str	r3, [sp, #36]	@ 0x24
 8006892:	e76a      	b.n	800676a <_svfiprintf_r+0x52>
 8006894:	fb0c 3202 	mla	r2, ip, r2, r3
 8006898:	460c      	mov	r4, r1
 800689a:	2001      	movs	r0, #1
 800689c:	e7a8      	b.n	80067f0 <_svfiprintf_r+0xd8>
 800689e:	2300      	movs	r3, #0
 80068a0:	3401      	adds	r4, #1
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068b0:	3a30      	subs	r2, #48	@ 0x30
 80068b2:	2a09      	cmp	r2, #9
 80068b4:	d903      	bls.n	80068be <_svfiprintf_r+0x1a6>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0c6      	beq.n	8006848 <_svfiprintf_r+0x130>
 80068ba:	9105      	str	r1, [sp, #20]
 80068bc:	e7c4      	b.n	8006848 <_svfiprintf_r+0x130>
 80068be:	fb0c 2101 	mla	r1, ip, r1, r2
 80068c2:	4604      	mov	r4, r0
 80068c4:	2301      	movs	r3, #1
 80068c6:	e7f0      	b.n	80068aa <_svfiprintf_r+0x192>
 80068c8:	ab03      	add	r3, sp, #12
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	462a      	mov	r2, r5
 80068ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <_svfiprintf_r+0x1f0>)
 80068d0:	a904      	add	r1, sp, #16
 80068d2:	4638      	mov	r0, r7
 80068d4:	f3af 8000 	nop.w
 80068d8:	1c42      	adds	r2, r0, #1
 80068da:	4606      	mov	r6, r0
 80068dc:	d1d6      	bne.n	800688c <_svfiprintf_r+0x174>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	065b      	lsls	r3, r3, #25
 80068e2:	f53f af2d 	bmi.w	8006740 <_svfiprintf_r+0x28>
 80068e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068e8:	e72c      	b.n	8006744 <_svfiprintf_r+0x2c>
 80068ea:	ab03      	add	r3, sp, #12
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	462a      	mov	r2, r5
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <_svfiprintf_r+0x1f0>)
 80068f2:	a904      	add	r1, sp, #16
 80068f4:	4638      	mov	r0, r7
 80068f6:	f000 fa49 	bl	8006d8c <_printf_i>
 80068fa:	e7ed      	b.n	80068d8 <_svfiprintf_r+0x1c0>
 80068fc:	080076d0 	.word	0x080076d0
 8006900:	080076da 	.word	0x080076da
 8006904:	00000000 	.word	0x00000000
 8006908:	08006661 	.word	0x08006661
 800690c:	080076d6 	.word	0x080076d6

08006910 <_sungetc_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	1c4b      	adds	r3, r1, #1
 8006914:	4614      	mov	r4, r2
 8006916:	d103      	bne.n	8006920 <_sungetc_r+0x10>
 8006918:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800691c:	4628      	mov	r0, r5
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	8993      	ldrh	r3, [r2, #12]
 8006922:	f023 0320 	bic.w	r3, r3, #32
 8006926:	8193      	strh	r3, [r2, #12]
 8006928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	b2cd      	uxtb	r5, r1
 800692e:	b18b      	cbz	r3, 8006954 <_sungetc_r+0x44>
 8006930:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006932:	4293      	cmp	r3, r2
 8006934:	dd08      	ble.n	8006948 <_sungetc_r+0x38>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	1e5a      	subs	r2, r3, #1
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006940:	6863      	ldr	r3, [r4, #4]
 8006942:	3301      	adds	r3, #1
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	e7e9      	b.n	800691c <_sungetc_r+0xc>
 8006948:	4621      	mov	r1, r4
 800694a:	f000 fcc4 	bl	80072d6 <__submore>
 800694e:	2800      	cmp	r0, #0
 8006950:	d0f1      	beq.n	8006936 <_sungetc_r+0x26>
 8006952:	e7e1      	b.n	8006918 <_sungetc_r+0x8>
 8006954:	6921      	ldr	r1, [r4, #16]
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	b151      	cbz	r1, 8006970 <_sungetc_r+0x60>
 800695a:	4299      	cmp	r1, r3
 800695c:	d208      	bcs.n	8006970 <_sungetc_r+0x60>
 800695e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006962:	42a9      	cmp	r1, r5
 8006964:	d104      	bne.n	8006970 <_sungetc_r+0x60>
 8006966:	3b01      	subs	r3, #1
 8006968:	3201      	adds	r2, #1
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	6062      	str	r2, [r4, #4]
 800696e:	e7d5      	b.n	800691c <_sungetc_r+0xc>
 8006970:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006978:	6363      	str	r3, [r4, #52]	@ 0x34
 800697a:	2303      	movs	r3, #3
 800697c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800697e:	4623      	mov	r3, r4
 8006980:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	2301      	movs	r3, #1
 8006988:	e7dc      	b.n	8006944 <_sungetc_r+0x34>

0800698a <__ssrefill_r>:
 800698a:	b510      	push	{r4, lr}
 800698c:	460c      	mov	r4, r1
 800698e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006990:	b169      	cbz	r1, 80069ae <__ssrefill_r+0x24>
 8006992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006996:	4299      	cmp	r1, r3
 8006998:	d001      	beq.n	800699e <__ssrefill_r+0x14>
 800699a:	f7ff fd69 	bl	8006470 <_free_r>
 800699e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	2000      	movs	r0, #0
 80069a4:	6360      	str	r0, [r4, #52]	@ 0x34
 80069a6:	b113      	cbz	r3, 80069ae <__ssrefill_r+0x24>
 80069a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f043 0320 	orr.w	r3, r3, #32
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069c2:	e7f3      	b.n	80069ac <__ssrefill_r+0x22>

080069c4 <__ssvfiscanf_r>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	460c      	mov	r4, r1
 80069ca:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80069ce:	2100      	movs	r1, #0
 80069d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80069d4:	49a6      	ldr	r1, [pc, #664]	@ (8006c70 <__ssvfiscanf_r+0x2ac>)
 80069d6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80069d8:	f10d 0804 	add.w	r8, sp, #4
 80069dc:	49a5      	ldr	r1, [pc, #660]	@ (8006c74 <__ssvfiscanf_r+0x2b0>)
 80069de:	4fa6      	ldr	r7, [pc, #664]	@ (8006c78 <__ssvfiscanf_r+0x2b4>)
 80069e0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80069e4:	4606      	mov	r6, r0
 80069e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	f892 9000 	ldrb.w	r9, [r2]
 80069ee:	f1b9 0f00 	cmp.w	r9, #0
 80069f2:	f000 8158 	beq.w	8006ca6 <__ssvfiscanf_r+0x2e2>
 80069f6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80069fa:	f013 0308 	ands.w	r3, r3, #8
 80069fe:	f102 0501 	add.w	r5, r2, #1
 8006a02:	d019      	beq.n	8006a38 <__ssvfiscanf_r+0x74>
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd0f      	ble.n	8006a2a <__ssvfiscanf_r+0x66>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	5cba      	ldrb	r2, [r7, r2]
 8006a10:	0712      	lsls	r2, r2, #28
 8006a12:	d401      	bmi.n	8006a18 <__ssvfiscanf_r+0x54>
 8006a14:	462a      	mov	r2, r5
 8006a16:	e7e8      	b.n	80069ea <__ssvfiscanf_r+0x26>
 8006a18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	3301      	adds	r3, #1
 8006a22:	3a01      	subs	r2, #1
 8006a24:	6062      	str	r2, [r4, #4]
 8006a26:	6023      	str	r3, [r4, #0]
 8006a28:	e7ec      	b.n	8006a04 <__ssvfiscanf_r+0x40>
 8006a2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4798      	blx	r3
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d0e9      	beq.n	8006a0a <__ssvfiscanf_r+0x46>
 8006a36:	e7ed      	b.n	8006a14 <__ssvfiscanf_r+0x50>
 8006a38:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8006a3c:	f040 8085 	bne.w	8006b4a <__ssvfiscanf_r+0x186>
 8006a40:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a42:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006a44:	7853      	ldrb	r3, [r2, #1]
 8006a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a48:	bf02      	ittt	eq
 8006a4a:	2310      	moveq	r3, #16
 8006a4c:	1c95      	addeq	r5, r2, #2
 8006a4e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006a50:	220a      	movs	r2, #10
 8006a52:	46aa      	mov	sl, r5
 8006a54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006a58:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006a5c:	2b09      	cmp	r3, #9
 8006a5e:	d91e      	bls.n	8006a9e <__ssvfiscanf_r+0xda>
 8006a60:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8006c7c <__ssvfiscanf_r+0x2b8>
 8006a64:	2203      	movs	r2, #3
 8006a66:	4658      	mov	r0, fp
 8006a68:	f7f9 fbf2 	bl	8000250 <memchr>
 8006a6c:	b138      	cbz	r0, 8006a7e <__ssvfiscanf_r+0xba>
 8006a6e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006a70:	eba0 000b 	sub.w	r0, r0, fp
 8006a74:	2301      	movs	r3, #1
 8006a76:	4083      	lsls	r3, r0
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a7c:	4655      	mov	r5, sl
 8006a7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a82:	2b78      	cmp	r3, #120	@ 0x78
 8006a84:	d806      	bhi.n	8006a94 <__ssvfiscanf_r+0xd0>
 8006a86:	2b57      	cmp	r3, #87	@ 0x57
 8006a88:	d810      	bhi.n	8006aac <__ssvfiscanf_r+0xe8>
 8006a8a:	2b25      	cmp	r3, #37	@ 0x25
 8006a8c:	d05d      	beq.n	8006b4a <__ssvfiscanf_r+0x186>
 8006a8e:	d857      	bhi.n	8006b40 <__ssvfiscanf_r+0x17c>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d075      	beq.n	8006b80 <__ssvfiscanf_r+0x1bc>
 8006a94:	2303      	movs	r3, #3
 8006a96:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006a98:	230a      	movs	r3, #10
 8006a9a:	9342      	str	r3, [sp, #264]	@ 0x108
 8006a9c:	e088      	b.n	8006bb0 <__ssvfiscanf_r+0x1ec>
 8006a9e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006aa0:	fb02 1103 	mla	r1, r2, r3, r1
 8006aa4:	3930      	subs	r1, #48	@ 0x30
 8006aa6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006aa8:	4655      	mov	r5, sl
 8006aaa:	e7d2      	b.n	8006a52 <__ssvfiscanf_r+0x8e>
 8006aac:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006ab0:	2a20      	cmp	r2, #32
 8006ab2:	d8ef      	bhi.n	8006a94 <__ssvfiscanf_r+0xd0>
 8006ab4:	a101      	add	r1, pc, #4	@ (adr r1, 8006abc <__ssvfiscanf_r+0xf8>)
 8006ab6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006b8f 	.word	0x08006b8f
 8006ac0:	08006a95 	.word	0x08006a95
 8006ac4:	08006a95 	.word	0x08006a95
 8006ac8:	08006be9 	.word	0x08006be9
 8006acc:	08006a95 	.word	0x08006a95
 8006ad0:	08006a95 	.word	0x08006a95
 8006ad4:	08006a95 	.word	0x08006a95
 8006ad8:	08006a95 	.word	0x08006a95
 8006adc:	08006a95 	.word	0x08006a95
 8006ae0:	08006a95 	.word	0x08006a95
 8006ae4:	08006a95 	.word	0x08006a95
 8006ae8:	08006bff 	.word	0x08006bff
 8006aec:	08006be5 	.word	0x08006be5
 8006af0:	08006b47 	.word	0x08006b47
 8006af4:	08006b47 	.word	0x08006b47
 8006af8:	08006b47 	.word	0x08006b47
 8006afc:	08006a95 	.word	0x08006a95
 8006b00:	08006ba1 	.word	0x08006ba1
 8006b04:	08006a95 	.word	0x08006a95
 8006b08:	08006a95 	.word	0x08006a95
 8006b0c:	08006a95 	.word	0x08006a95
 8006b10:	08006a95 	.word	0x08006a95
 8006b14:	08006c0f 	.word	0x08006c0f
 8006b18:	08006ba9 	.word	0x08006ba9
 8006b1c:	08006b87 	.word	0x08006b87
 8006b20:	08006a95 	.word	0x08006a95
 8006b24:	08006a95 	.word	0x08006a95
 8006b28:	08006c0b 	.word	0x08006c0b
 8006b2c:	08006a95 	.word	0x08006a95
 8006b30:	08006be5 	.word	0x08006be5
 8006b34:	08006a95 	.word	0x08006a95
 8006b38:	08006a95 	.word	0x08006a95
 8006b3c:	08006b8f 	.word	0x08006b8f
 8006b40:	3b45      	subs	r3, #69	@ 0x45
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d8a6      	bhi.n	8006a94 <__ssvfiscanf_r+0xd0>
 8006b46:	2305      	movs	r3, #5
 8006b48:	e031      	b.n	8006bae <__ssvfiscanf_r+0x1ea>
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dd0d      	ble.n	8006b6c <__ssvfiscanf_r+0x1a8>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	454a      	cmp	r2, r9
 8006b56:	f040 80a6 	bne.w	8006ca6 <__ssvfiscanf_r+0x2e2>
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006b62:	3a01      	subs	r2, #1
 8006b64:	3301      	adds	r3, #1
 8006b66:	6062      	str	r2, [r4, #4]
 8006b68:	9345      	str	r3, [sp, #276]	@ 0x114
 8006b6a:	e753      	b.n	8006a14 <__ssvfiscanf_r+0x50>
 8006b6c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4630      	mov	r0, r6
 8006b72:	4798      	blx	r3
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d0eb      	beq.n	8006b50 <__ssvfiscanf_r+0x18c>
 8006b78:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f040 808b 	bne.w	8006c96 <__ssvfiscanf_r+0x2d2>
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b84:	e08b      	b.n	8006c9e <__ssvfiscanf_r+0x2da>
 8006b86:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006b88:	f042 0220 	orr.w	r2, r2, #32
 8006b8c:	9241      	str	r2, [sp, #260]	@ 0x104
 8006b8e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b94:	9241      	str	r2, [sp, #260]	@ 0x104
 8006b96:	2210      	movs	r2, #16
 8006b98:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b9a:	9242      	str	r2, [sp, #264]	@ 0x108
 8006b9c:	d902      	bls.n	8006ba4 <__ssvfiscanf_r+0x1e0>
 8006b9e:	e005      	b.n	8006bac <__ssvfiscanf_r+0x1e8>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9342      	str	r3, [sp, #264]	@ 0x108
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e002      	b.n	8006bae <__ssvfiscanf_r+0x1ea>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	9342      	str	r3, [sp, #264]	@ 0x108
 8006bac:	2304      	movs	r3, #4
 8006bae:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dd39      	ble.n	8006c2a <__ssvfiscanf_r+0x266>
 8006bb6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006bb8:	0659      	lsls	r1, r3, #25
 8006bba:	d404      	bmi.n	8006bc6 <__ssvfiscanf_r+0x202>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	5cba      	ldrb	r2, [r7, r2]
 8006bc2:	0712      	lsls	r2, r2, #28
 8006bc4:	d438      	bmi.n	8006c38 <__ssvfiscanf_r+0x274>
 8006bc6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	dc47      	bgt.n	8006c5c <__ssvfiscanf_r+0x298>
 8006bcc:	466b      	mov	r3, sp
 8006bce:	4622      	mov	r2, r4
 8006bd0:	a941      	add	r1, sp, #260	@ 0x104
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f000 f9f8 	bl	8006fc8 <_scanf_chars>
 8006bd8:	2801      	cmp	r0, #1
 8006bda:	d064      	beq.n	8006ca6 <__ssvfiscanf_r+0x2e2>
 8006bdc:	2802      	cmp	r0, #2
 8006bde:	f47f af19 	bne.w	8006a14 <__ssvfiscanf_r+0x50>
 8006be2:	e7c9      	b.n	8006b78 <__ssvfiscanf_r+0x1b4>
 8006be4:	220a      	movs	r2, #10
 8006be6:	e7d7      	b.n	8006b98 <__ssvfiscanf_r+0x1d4>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4640      	mov	r0, r8
 8006bec:	f000 fb3a 	bl	8007264 <__sccl>
 8006bf0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf6:	9341      	str	r3, [sp, #260]	@ 0x104
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7d7      	b.n	8006bae <__ssvfiscanf_r+0x1ea>
 8006bfe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c04:	9341      	str	r3, [sp, #260]	@ 0x104
 8006c06:	2300      	movs	r3, #0
 8006c08:	e7d1      	b.n	8006bae <__ssvfiscanf_r+0x1ea>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e7cf      	b.n	8006bae <__ssvfiscanf_r+0x1ea>
 8006c0e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006c10:	06c3      	lsls	r3, r0, #27
 8006c12:	f53f aeff 	bmi.w	8006a14 <__ssvfiscanf_r+0x50>
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006c1a:	1d19      	adds	r1, r3, #4
 8006c1c:	9100      	str	r1, [sp, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	07c0      	lsls	r0, r0, #31
 8006c22:	bf4c      	ite	mi
 8006c24:	801a      	strhmi	r2, [r3, #0]
 8006c26:	601a      	strpl	r2, [r3, #0]
 8006c28:	e6f4      	b.n	8006a14 <__ssvfiscanf_r+0x50>
 8006c2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4798      	blx	r3
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0bf      	beq.n	8006bb6 <__ssvfiscanf_r+0x1f2>
 8006c36:	e79f      	b.n	8006b78 <__ssvfiscanf_r+0x1b4>
 8006c38:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	3a01      	subs	r2, #1
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	6062      	str	r2, [r4, #4]
 8006c46:	dd02      	ble.n	8006c4e <__ssvfiscanf_r+0x28a>
 8006c48:	3301      	adds	r3, #1
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	e7b6      	b.n	8006bbc <__ssvfiscanf_r+0x1f8>
 8006c4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006c50:	4621      	mov	r1, r4
 8006c52:	4630      	mov	r0, r6
 8006c54:	4798      	blx	r3
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d0b0      	beq.n	8006bbc <__ssvfiscanf_r+0x1f8>
 8006c5a:	e78d      	b.n	8006b78 <__ssvfiscanf_r+0x1b4>
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	dc0f      	bgt.n	8006c80 <__ssvfiscanf_r+0x2bc>
 8006c60:	466b      	mov	r3, sp
 8006c62:	4622      	mov	r2, r4
 8006c64:	a941      	add	r1, sp, #260	@ 0x104
 8006c66:	4630      	mov	r0, r6
 8006c68:	f000 fa08 	bl	800707c <_scanf_i>
 8006c6c:	e7b4      	b.n	8006bd8 <__ssvfiscanf_r+0x214>
 8006c6e:	bf00      	nop
 8006c70:	08006911 	.word	0x08006911
 8006c74:	0800698b 	.word	0x0800698b
 8006c78:	0800771f 	.word	0x0800771f
 8006c7c:	080076d6 	.word	0x080076d6
 8006c80:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <__ssvfiscanf_r+0x2e8>)
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f43f aec6 	beq.w	8006a14 <__ssvfiscanf_r+0x50>
 8006c88:	466b      	mov	r3, sp
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	a941      	add	r1, sp, #260	@ 0x104
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f3af 8000 	nop.w
 8006c94:	e7a0      	b.n	8006bd8 <__ssvfiscanf_r+0x214>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	065b      	lsls	r3, r3, #25
 8006c9a:	f53f af71 	bmi.w	8006b80 <__ssvfiscanf_r+0x1bc>
 8006c9e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006ca8:	e7f9      	b.n	8006c9e <__ssvfiscanf_r+0x2da>
 8006caa:	bf00      	nop
 8006cac:	00000000 	.word	0x00000000

08006cb0 <_printf_common>:
 8006cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	4698      	mov	r8, r3
 8006cb8:	688a      	ldr	r2, [r1, #8]
 8006cba:	690b      	ldr	r3, [r1, #16]
 8006cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	bfb8      	it	lt
 8006cc4:	4613      	movlt	r3, r2
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ccc:	4607      	mov	r7, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	b10a      	cbz	r2, 8006cd6 <_printf_common+0x26>
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	6033      	str	r3, [r6, #0]
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	0699      	lsls	r1, r3, #26
 8006cda:	bf42      	ittt	mi
 8006cdc:	6833      	ldrmi	r3, [r6, #0]
 8006cde:	3302      	addmi	r3, #2
 8006ce0:	6033      	strmi	r3, [r6, #0]
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	f015 0506 	ands.w	r5, r5, #6
 8006ce8:	d106      	bne.n	8006cf8 <_printf_common+0x48>
 8006cea:	f104 0a19 	add.w	sl, r4, #25
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	6832      	ldr	r2, [r6, #0]
 8006cf2:	1a9b      	subs	r3, r3, r2
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dc26      	bgt.n	8006d46 <_printf_common+0x96>
 8006cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	3b00      	subs	r3, #0
 8006d00:	bf18      	it	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	0692      	lsls	r2, r2, #26
 8006d06:	d42b      	bmi.n	8006d60 <_printf_common+0xb0>
 8006d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	4638      	mov	r0, r7
 8006d10:	47c8      	blx	r9
 8006d12:	3001      	adds	r0, #1
 8006d14:	d01e      	beq.n	8006d54 <_printf_common+0xa4>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	6922      	ldr	r2, [r4, #16]
 8006d1a:	f003 0306 	and.w	r3, r3, #6
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	bf02      	ittt	eq
 8006d22:	68e5      	ldreq	r5, [r4, #12]
 8006d24:	6833      	ldreq	r3, [r6, #0]
 8006d26:	1aed      	subeq	r5, r5, r3
 8006d28:	68a3      	ldr	r3, [r4, #8]
 8006d2a:	bf0c      	ite	eq
 8006d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d30:	2500      	movne	r5, #0
 8006d32:	4293      	cmp	r3, r2
 8006d34:	bfc4      	itt	gt
 8006d36:	1a9b      	subgt	r3, r3, r2
 8006d38:	18ed      	addgt	r5, r5, r3
 8006d3a:	2600      	movs	r6, #0
 8006d3c:	341a      	adds	r4, #26
 8006d3e:	42b5      	cmp	r5, r6
 8006d40:	d11a      	bne.n	8006d78 <_printf_common+0xc8>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e008      	b.n	8006d58 <_printf_common+0xa8>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4652      	mov	r2, sl
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	47c8      	blx	r9
 8006d50:	3001      	adds	r0, #1
 8006d52:	d103      	bne.n	8006d5c <_printf_common+0xac>
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5c:	3501      	adds	r5, #1
 8006d5e:	e7c6      	b.n	8006cee <_printf_common+0x3e>
 8006d60:	18e1      	adds	r1, r4, r3
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	2030      	movs	r0, #48	@ 0x30
 8006d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d6a:	4422      	add	r2, r4
 8006d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d74:	3302      	adds	r3, #2
 8006d76:	e7c7      	b.n	8006d08 <_printf_common+0x58>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	4638      	mov	r0, r7
 8006d80:	47c8      	blx	r9
 8006d82:	3001      	adds	r0, #1
 8006d84:	d0e6      	beq.n	8006d54 <_printf_common+0xa4>
 8006d86:	3601      	adds	r6, #1
 8006d88:	e7d9      	b.n	8006d3e <_printf_common+0x8e>
	...

08006d8c <_printf_i>:
 8006d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	7e0f      	ldrb	r7, [r1, #24]
 8006d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d94:	2f78      	cmp	r7, #120	@ 0x78
 8006d96:	4691      	mov	r9, r2
 8006d98:	4680      	mov	r8, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	469a      	mov	sl, r3
 8006d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006da2:	d807      	bhi.n	8006db4 <_printf_i+0x28>
 8006da4:	2f62      	cmp	r7, #98	@ 0x62
 8006da6:	d80a      	bhi.n	8006dbe <_printf_i+0x32>
 8006da8:	2f00      	cmp	r7, #0
 8006daa:	f000 80d1 	beq.w	8006f50 <_printf_i+0x1c4>
 8006dae:	2f58      	cmp	r7, #88	@ 0x58
 8006db0:	f000 80b8 	beq.w	8006f24 <_printf_i+0x198>
 8006db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dbc:	e03a      	b.n	8006e34 <_printf_i+0xa8>
 8006dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dc2:	2b15      	cmp	r3, #21
 8006dc4:	d8f6      	bhi.n	8006db4 <_printf_i+0x28>
 8006dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8006dcc <_printf_i+0x40>)
 8006dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dcc:	08006e25 	.word	0x08006e25
 8006dd0:	08006e39 	.word	0x08006e39
 8006dd4:	08006db5 	.word	0x08006db5
 8006dd8:	08006db5 	.word	0x08006db5
 8006ddc:	08006db5 	.word	0x08006db5
 8006de0:	08006db5 	.word	0x08006db5
 8006de4:	08006e39 	.word	0x08006e39
 8006de8:	08006db5 	.word	0x08006db5
 8006dec:	08006db5 	.word	0x08006db5
 8006df0:	08006db5 	.word	0x08006db5
 8006df4:	08006db5 	.word	0x08006db5
 8006df8:	08006f37 	.word	0x08006f37
 8006dfc:	08006e63 	.word	0x08006e63
 8006e00:	08006ef1 	.word	0x08006ef1
 8006e04:	08006db5 	.word	0x08006db5
 8006e08:	08006db5 	.word	0x08006db5
 8006e0c:	08006f59 	.word	0x08006f59
 8006e10:	08006db5 	.word	0x08006db5
 8006e14:	08006e63 	.word	0x08006e63
 8006e18:	08006db5 	.word	0x08006db5
 8006e1c:	08006db5 	.word	0x08006db5
 8006e20:	08006ef9 	.word	0x08006ef9
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	1d1a      	adds	r2, r3, #4
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6032      	str	r2, [r6, #0]
 8006e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e34:	2301      	movs	r3, #1
 8006e36:	e09c      	b.n	8006f72 <_printf_i+0x1e6>
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	1d19      	adds	r1, r3, #4
 8006e3e:	6031      	str	r1, [r6, #0]
 8006e40:	0606      	lsls	r6, r0, #24
 8006e42:	d501      	bpl.n	8006e48 <_printf_i+0xbc>
 8006e44:	681d      	ldr	r5, [r3, #0]
 8006e46:	e003      	b.n	8006e50 <_printf_i+0xc4>
 8006e48:	0645      	lsls	r5, r0, #25
 8006e4a:	d5fb      	bpl.n	8006e44 <_printf_i+0xb8>
 8006e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	da03      	bge.n	8006e5c <_printf_i+0xd0>
 8006e54:	232d      	movs	r3, #45	@ 0x2d
 8006e56:	426d      	negs	r5, r5
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e5c:	4858      	ldr	r0, [pc, #352]	@ (8006fc0 <_printf_i+0x234>)
 8006e5e:	230a      	movs	r3, #10
 8006e60:	e011      	b.n	8006e86 <_printf_i+0xfa>
 8006e62:	6821      	ldr	r1, [r4, #0]
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	0608      	lsls	r0, r1, #24
 8006e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e6c:	d402      	bmi.n	8006e74 <_printf_i+0xe8>
 8006e6e:	0649      	lsls	r1, r1, #25
 8006e70:	bf48      	it	mi
 8006e72:	b2ad      	uxthmi	r5, r5
 8006e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e76:	4852      	ldr	r0, [pc, #328]	@ (8006fc0 <_printf_i+0x234>)
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	bf14      	ite	ne
 8006e7c:	230a      	movne	r3, #10
 8006e7e:	2308      	moveq	r3, #8
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e86:	6866      	ldr	r6, [r4, #4]
 8006e88:	60a6      	str	r6, [r4, #8]
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	db05      	blt.n	8006e9a <_printf_i+0x10e>
 8006e8e:	6821      	ldr	r1, [r4, #0]
 8006e90:	432e      	orrs	r6, r5
 8006e92:	f021 0104 	bic.w	r1, r1, #4
 8006e96:	6021      	str	r1, [r4, #0]
 8006e98:	d04b      	beq.n	8006f32 <_printf_i+0x1a6>
 8006e9a:	4616      	mov	r6, r2
 8006e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ea4:	5dc7      	ldrb	r7, [r0, r7]
 8006ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eaa:	462f      	mov	r7, r5
 8006eac:	42bb      	cmp	r3, r7
 8006eae:	460d      	mov	r5, r1
 8006eb0:	d9f4      	bls.n	8006e9c <_printf_i+0x110>
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d10b      	bne.n	8006ece <_printf_i+0x142>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	07df      	lsls	r7, r3, #31
 8006eba:	d508      	bpl.n	8006ece <_printf_i+0x142>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	6861      	ldr	r1, [r4, #4]
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	bfde      	ittt	le
 8006ec4:	2330      	movle	r3, #48	@ 0x30
 8006ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ece:	1b92      	subs	r2, r2, r6
 8006ed0:	6122      	str	r2, [r4, #16]
 8006ed2:	f8cd a000 	str.w	sl, [sp]
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	aa03      	add	r2, sp, #12
 8006eda:	4621      	mov	r1, r4
 8006edc:	4640      	mov	r0, r8
 8006ede:	f7ff fee7 	bl	8006cb0 <_printf_common>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d14a      	bne.n	8006f7c <_printf_i+0x1f0>
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eea:	b004      	add	sp, #16
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	f043 0320 	orr.w	r3, r3, #32
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	4832      	ldr	r0, [pc, #200]	@ (8006fc4 <_printf_i+0x238>)
 8006efa:	2778      	movs	r7, #120	@ 0x78
 8006efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	6831      	ldr	r1, [r6, #0]
 8006f04:	061f      	lsls	r7, r3, #24
 8006f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f0a:	d402      	bmi.n	8006f12 <_printf_i+0x186>
 8006f0c:	065f      	lsls	r7, r3, #25
 8006f0e:	bf48      	it	mi
 8006f10:	b2ad      	uxthmi	r5, r5
 8006f12:	6031      	str	r1, [r6, #0]
 8006f14:	07d9      	lsls	r1, r3, #31
 8006f16:	bf44      	itt	mi
 8006f18:	f043 0320 	orrmi.w	r3, r3, #32
 8006f1c:	6023      	strmi	r3, [r4, #0]
 8006f1e:	b11d      	cbz	r5, 8006f28 <_printf_i+0x19c>
 8006f20:	2310      	movs	r3, #16
 8006f22:	e7ad      	b.n	8006e80 <_printf_i+0xf4>
 8006f24:	4826      	ldr	r0, [pc, #152]	@ (8006fc0 <_printf_i+0x234>)
 8006f26:	e7e9      	b.n	8006efc <_printf_i+0x170>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	f023 0320 	bic.w	r3, r3, #32
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	e7f6      	b.n	8006f20 <_printf_i+0x194>
 8006f32:	4616      	mov	r6, r2
 8006f34:	e7bd      	b.n	8006eb2 <_printf_i+0x126>
 8006f36:	6833      	ldr	r3, [r6, #0]
 8006f38:	6825      	ldr	r5, [r4, #0]
 8006f3a:	6961      	ldr	r1, [r4, #20]
 8006f3c:	1d18      	adds	r0, r3, #4
 8006f3e:	6030      	str	r0, [r6, #0]
 8006f40:	062e      	lsls	r6, r5, #24
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	d501      	bpl.n	8006f4a <_printf_i+0x1be>
 8006f46:	6019      	str	r1, [r3, #0]
 8006f48:	e002      	b.n	8006f50 <_printf_i+0x1c4>
 8006f4a:	0668      	lsls	r0, r5, #25
 8006f4c:	d5fb      	bpl.n	8006f46 <_printf_i+0x1ba>
 8006f4e:	8019      	strh	r1, [r3, #0]
 8006f50:	2300      	movs	r3, #0
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	4616      	mov	r6, r2
 8006f56:	e7bc      	b.n	8006ed2 <_printf_i+0x146>
 8006f58:	6833      	ldr	r3, [r6, #0]
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	6032      	str	r2, [r6, #0]
 8006f5e:	681e      	ldr	r6, [r3, #0]
 8006f60:	6862      	ldr	r2, [r4, #4]
 8006f62:	2100      	movs	r1, #0
 8006f64:	4630      	mov	r0, r6
 8006f66:	f7f9 f973 	bl	8000250 <memchr>
 8006f6a:	b108      	cbz	r0, 8006f70 <_printf_i+0x1e4>
 8006f6c:	1b80      	subs	r0, r0, r6
 8006f6e:	6060      	str	r0, [r4, #4]
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	6123      	str	r3, [r4, #16]
 8006f74:	2300      	movs	r3, #0
 8006f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f7a:	e7aa      	b.n	8006ed2 <_printf_i+0x146>
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	4632      	mov	r2, r6
 8006f80:	4649      	mov	r1, r9
 8006f82:	4640      	mov	r0, r8
 8006f84:	47d0      	blx	sl
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0ad      	beq.n	8006ee6 <_printf_i+0x15a>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	079b      	lsls	r3, r3, #30
 8006f8e:	d413      	bmi.n	8006fb8 <_printf_i+0x22c>
 8006f90:	68e0      	ldr	r0, [r4, #12]
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	4298      	cmp	r0, r3
 8006f96:	bfb8      	it	lt
 8006f98:	4618      	movlt	r0, r3
 8006f9a:	e7a6      	b.n	8006eea <_printf_i+0x15e>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	47d0      	blx	sl
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d09d      	beq.n	8006ee6 <_printf_i+0x15a>
 8006faa:	3501      	adds	r5, #1
 8006fac:	68e3      	ldr	r3, [r4, #12]
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	1a5b      	subs	r3, r3, r1
 8006fb2:	42ab      	cmp	r3, r5
 8006fb4:	dcf2      	bgt.n	8006f9c <_printf_i+0x210>
 8006fb6:	e7eb      	b.n	8006f90 <_printf_i+0x204>
 8006fb8:	2500      	movs	r5, #0
 8006fba:	f104 0619 	add.w	r6, r4, #25
 8006fbe:	e7f5      	b.n	8006fac <_printf_i+0x220>
 8006fc0:	080076e1 	.word	0x080076e1
 8006fc4:	080076f2 	.word	0x080076f2

08006fc8 <_scanf_chars>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	688a      	ldr	r2, [r1, #8]
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	b932      	cbnz	r2, 8006fe4 <_scanf_chars+0x1c>
 8006fd6:	698a      	ldr	r2, [r1, #24]
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006fe0:	2201      	moveq	r2, #1
 8006fe2:	608a      	str	r2, [r1, #8]
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007078 <_scanf_chars+0xb0>
 8006fea:	06d1      	lsls	r1, r2, #27
 8006fec:	bf5f      	itttt	pl
 8006fee:	681a      	ldrpl	r2, [r3, #0]
 8006ff0:	1d11      	addpl	r1, r2, #4
 8006ff2:	6019      	strpl	r1, [r3, #0]
 8006ff4:	6816      	ldrpl	r6, [r2, #0]
 8006ff6:	2700      	movs	r7, #0
 8006ff8:	69a0      	ldr	r0, [r4, #24]
 8006ffa:	b188      	cbz	r0, 8007020 <_scanf_chars+0x58>
 8006ffc:	2801      	cmp	r0, #1
 8006ffe:	d107      	bne.n	8007010 <_scanf_chars+0x48>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	6963      	ldr	r3, [r4, #20]
 8007006:	5c9b      	ldrb	r3, [r3, r2]
 8007008:	b953      	cbnz	r3, 8007020 <_scanf_chars+0x58>
 800700a:	2f00      	cmp	r7, #0
 800700c:	d031      	beq.n	8007072 <_scanf_chars+0xaa>
 800700e:	e022      	b.n	8007056 <_scanf_chars+0x8e>
 8007010:	2802      	cmp	r0, #2
 8007012:	d120      	bne.n	8007056 <_scanf_chars+0x8e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f819 3003 	ldrb.w	r3, [r9, r3]
 800701c:	071b      	lsls	r3, r3, #28
 800701e:	d41a      	bmi.n	8007056 <_scanf_chars+0x8e>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	06da      	lsls	r2, r3, #27
 8007024:	bf5e      	ittt	pl
 8007026:	682b      	ldrpl	r3, [r5, #0]
 8007028:	781b      	ldrbpl	r3, [r3, #0]
 800702a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800702e:	682a      	ldr	r2, [r5, #0]
 8007030:	686b      	ldr	r3, [r5, #4]
 8007032:	3201      	adds	r2, #1
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	68a2      	ldr	r2, [r4, #8]
 8007038:	3b01      	subs	r3, #1
 800703a:	3a01      	subs	r2, #1
 800703c:	606b      	str	r3, [r5, #4]
 800703e:	3701      	adds	r7, #1
 8007040:	60a2      	str	r2, [r4, #8]
 8007042:	b142      	cbz	r2, 8007056 <_scanf_chars+0x8e>
 8007044:	2b00      	cmp	r3, #0
 8007046:	dcd7      	bgt.n	8006ff8 <_scanf_chars+0x30>
 8007048:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800704c:	4629      	mov	r1, r5
 800704e:	4640      	mov	r0, r8
 8007050:	4798      	blx	r3
 8007052:	2800      	cmp	r0, #0
 8007054:	d0d0      	beq.n	8006ff8 <_scanf_chars+0x30>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f013 0310 	ands.w	r3, r3, #16
 800705c:	d105      	bne.n	800706a <_scanf_chars+0xa2>
 800705e:	68e2      	ldr	r2, [r4, #12]
 8007060:	3201      	adds	r2, #1
 8007062:	60e2      	str	r2, [r4, #12]
 8007064:	69a2      	ldr	r2, [r4, #24]
 8007066:	b102      	cbz	r2, 800706a <_scanf_chars+0xa2>
 8007068:	7033      	strb	r3, [r6, #0]
 800706a:	6923      	ldr	r3, [r4, #16]
 800706c:	443b      	add	r3, r7
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	2000      	movs	r0, #0
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	bf00      	nop
 8007078:	0800771f 	.word	0x0800771f

0800707c <_scanf_i>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	4698      	mov	r8, r3
 8007082:	4b74      	ldr	r3, [pc, #464]	@ (8007254 <_scanf_i+0x1d8>)
 8007084:	460c      	mov	r4, r1
 8007086:	4682      	mov	sl, r0
 8007088:	4616      	mov	r6, r2
 800708a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800708e:	b087      	sub	sp, #28
 8007090:	ab03      	add	r3, sp, #12
 8007092:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007096:	4b70      	ldr	r3, [pc, #448]	@ (8007258 <_scanf_i+0x1dc>)
 8007098:	69a1      	ldr	r1, [r4, #24]
 800709a:	4a70      	ldr	r2, [pc, #448]	@ (800725c <_scanf_i+0x1e0>)
 800709c:	2903      	cmp	r1, #3
 800709e:	bf08      	it	eq
 80070a0:	461a      	moveq	r2, r3
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	9201      	str	r2, [sp, #4]
 80070a6:	1e5a      	subs	r2, r3, #1
 80070a8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070ac:	bf88      	it	hi
 80070ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070b2:	4627      	mov	r7, r4
 80070b4:	bf82      	ittt	hi
 80070b6:	eb03 0905 	addhi.w	r9, r3, r5
 80070ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070be:	60a3      	strhi	r3, [r4, #8]
 80070c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80070c4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80070c8:	bf98      	it	ls
 80070ca:	f04f 0900 	movls.w	r9, #0
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	463d      	mov	r5, r7
 80070d2:	f04f 0b00 	mov.w	fp, #0
 80070d6:	6831      	ldr	r1, [r6, #0]
 80070d8:	ab03      	add	r3, sp, #12
 80070da:	7809      	ldrb	r1, [r1, #0]
 80070dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80070e0:	2202      	movs	r2, #2
 80070e2:	f7f9 f8b5 	bl	8000250 <memchr>
 80070e6:	b328      	cbz	r0, 8007134 <_scanf_i+0xb8>
 80070e8:	f1bb 0f01 	cmp.w	fp, #1
 80070ec:	d159      	bne.n	80071a2 <_scanf_i+0x126>
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	b92a      	cbnz	r2, 80070fe <_scanf_i+0x82>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	2108      	movs	r1, #8
 80070f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070fa:	6061      	str	r1, [r4, #4]
 80070fc:	6022      	str	r2, [r4, #0]
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	68a2      	ldr	r2, [r4, #8]
 8007108:	1e51      	subs	r1, r2, #1
 800710a:	60a1      	str	r1, [r4, #8]
 800710c:	b192      	cbz	r2, 8007134 <_scanf_i+0xb8>
 800710e:	6832      	ldr	r2, [r6, #0]
 8007110:	1c51      	adds	r1, r2, #1
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	f805 2b01 	strb.w	r2, [r5], #1
 800711a:	6872      	ldr	r2, [r6, #4]
 800711c:	3a01      	subs	r2, #1
 800711e:	2a00      	cmp	r2, #0
 8007120:	6072      	str	r2, [r6, #4]
 8007122:	dc07      	bgt.n	8007134 <_scanf_i+0xb8>
 8007124:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007128:	4631      	mov	r1, r6
 800712a:	4650      	mov	r0, sl
 800712c:	4790      	blx	r2
 800712e:	2800      	cmp	r0, #0
 8007130:	f040 8085 	bne.w	800723e <_scanf_i+0x1c2>
 8007134:	f10b 0b01 	add.w	fp, fp, #1
 8007138:	f1bb 0f03 	cmp.w	fp, #3
 800713c:	d1cb      	bne.n	80070d6 <_scanf_i+0x5a>
 800713e:	6863      	ldr	r3, [r4, #4]
 8007140:	b90b      	cbnz	r3, 8007146 <_scanf_i+0xca>
 8007142:	230a      	movs	r3, #10
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	4945      	ldr	r1, [pc, #276]	@ (8007260 <_scanf_i+0x1e4>)
 800714a:	6960      	ldr	r0, [r4, #20]
 800714c:	1ac9      	subs	r1, r1, r3
 800714e:	f000 f889 	bl	8007264 <__sccl>
 8007152:	f04f 0b00 	mov.w	fp, #0
 8007156:	68a3      	ldr	r3, [r4, #8]
 8007158:	6822      	ldr	r2, [r4, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d03d      	beq.n	80071da <_scanf_i+0x15e>
 800715e:	6831      	ldr	r1, [r6, #0]
 8007160:	6960      	ldr	r0, [r4, #20]
 8007162:	f891 c000 	ldrb.w	ip, [r1]
 8007166:	f810 000c 	ldrb.w	r0, [r0, ip]
 800716a:	2800      	cmp	r0, #0
 800716c:	d035      	beq.n	80071da <_scanf_i+0x15e>
 800716e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007172:	d124      	bne.n	80071be <_scanf_i+0x142>
 8007174:	0510      	lsls	r0, r2, #20
 8007176:	d522      	bpl.n	80071be <_scanf_i+0x142>
 8007178:	f10b 0b01 	add.w	fp, fp, #1
 800717c:	f1b9 0f00 	cmp.w	r9, #0
 8007180:	d003      	beq.n	800718a <_scanf_i+0x10e>
 8007182:	3301      	adds	r3, #1
 8007184:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	6873      	ldr	r3, [r6, #4]
 800718c:	3b01      	subs	r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	6073      	str	r3, [r6, #4]
 8007192:	dd1b      	ble.n	80071cc <_scanf_i+0x150>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	3301      	adds	r3, #1
 8007198:	6033      	str	r3, [r6, #0]
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	e7d9      	b.n	8007156 <_scanf_i+0xda>
 80071a2:	f1bb 0f02 	cmp.w	fp, #2
 80071a6:	d1ae      	bne.n	8007106 <_scanf_i+0x8a>
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80071ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80071b2:	d1c4      	bne.n	800713e <_scanf_i+0xc2>
 80071b4:	2110      	movs	r1, #16
 80071b6:	6061      	str	r1, [r4, #4]
 80071b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071bc:	e7a2      	b.n	8007104 <_scanf_i+0x88>
 80071be:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	780b      	ldrb	r3, [r1, #0]
 80071c6:	f805 3b01 	strb.w	r3, [r5], #1
 80071ca:	e7de      	b.n	800718a <_scanf_i+0x10e>
 80071cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80071d0:	4631      	mov	r1, r6
 80071d2:	4650      	mov	r0, sl
 80071d4:	4798      	blx	r3
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0df      	beq.n	800719a <_scanf_i+0x11e>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	05d9      	lsls	r1, r3, #23
 80071de:	d50d      	bpl.n	80071fc <_scanf_i+0x180>
 80071e0:	42bd      	cmp	r5, r7
 80071e2:	d909      	bls.n	80071f8 <_scanf_i+0x17c>
 80071e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80071e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ec:	4632      	mov	r2, r6
 80071ee:	4650      	mov	r0, sl
 80071f0:	4798      	blx	r3
 80071f2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80071f6:	464d      	mov	r5, r9
 80071f8:	42bd      	cmp	r5, r7
 80071fa:	d028      	beq.n	800724e <_scanf_i+0x1d2>
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	f012 0210 	ands.w	r2, r2, #16
 8007202:	d113      	bne.n	800722c <_scanf_i+0x1b0>
 8007204:	702a      	strb	r2, [r5, #0]
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	9e01      	ldr	r6, [sp, #4]
 800720a:	4639      	mov	r1, r7
 800720c:	4650      	mov	r0, sl
 800720e:	47b0      	blx	r6
 8007210:	f8d8 3000 	ldr.w	r3, [r8]
 8007214:	6821      	ldr	r1, [r4, #0]
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	f8c8 2000 	str.w	r2, [r8]
 800721c:	f011 0f20 	tst.w	r1, #32
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	d00f      	beq.n	8007244 <_scanf_i+0x1c8>
 8007224:	6018      	str	r0, [r3, #0]
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	3301      	adds	r3, #1
 800722a:	60e3      	str	r3, [r4, #12]
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	1bed      	subs	r5, r5, r7
 8007230:	445d      	add	r5, fp
 8007232:	442b      	add	r3, r5
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2000      	movs	r0, #0
 8007238:	b007      	add	sp, #28
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	f04f 0b00 	mov.w	fp, #0
 8007242:	e7ca      	b.n	80071da <_scanf_i+0x15e>
 8007244:	07ca      	lsls	r2, r1, #31
 8007246:	bf4c      	ite	mi
 8007248:	8018      	strhmi	r0, [r3, #0]
 800724a:	6018      	strpl	r0, [r3, #0]
 800724c:	e7eb      	b.n	8007226 <_scanf_i+0x1aa>
 800724e:	2001      	movs	r0, #1
 8007250:	e7f2      	b.n	8007238 <_scanf_i+0x1bc>
 8007252:	bf00      	nop
 8007254:	080076ac 	.word	0x080076ac
 8007258:	0800750d 	.word	0x0800750d
 800725c:	080075ed 	.word	0x080075ed
 8007260:	08007713 	.word	0x08007713

08007264 <__sccl>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	780b      	ldrb	r3, [r1, #0]
 8007268:	4604      	mov	r4, r0
 800726a:	2b5e      	cmp	r3, #94	@ 0x5e
 800726c:	bf0b      	itete	eq
 800726e:	784b      	ldrbeq	r3, [r1, #1]
 8007270:	1c4a      	addne	r2, r1, #1
 8007272:	1c8a      	addeq	r2, r1, #2
 8007274:	2100      	movne	r1, #0
 8007276:	bf08      	it	eq
 8007278:	2101      	moveq	r1, #1
 800727a:	3801      	subs	r0, #1
 800727c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007280:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007284:	42a8      	cmp	r0, r5
 8007286:	d1fb      	bne.n	8007280 <__sccl+0x1c>
 8007288:	b90b      	cbnz	r3, 800728e <__sccl+0x2a>
 800728a:	1e50      	subs	r0, r2, #1
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	f081 0101 	eor.w	r1, r1, #1
 8007292:	54e1      	strb	r1, [r4, r3]
 8007294:	4610      	mov	r0, r2
 8007296:	4602      	mov	r2, r0
 8007298:	f812 5b01 	ldrb.w	r5, [r2], #1
 800729c:	2d2d      	cmp	r5, #45	@ 0x2d
 800729e:	d005      	beq.n	80072ac <__sccl+0x48>
 80072a0:	2d5d      	cmp	r5, #93	@ 0x5d
 80072a2:	d016      	beq.n	80072d2 <__sccl+0x6e>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	d0f1      	beq.n	800728c <__sccl+0x28>
 80072a8:	462b      	mov	r3, r5
 80072aa:	e7f2      	b.n	8007292 <__sccl+0x2e>
 80072ac:	7846      	ldrb	r6, [r0, #1]
 80072ae:	2e5d      	cmp	r6, #93	@ 0x5d
 80072b0:	d0fa      	beq.n	80072a8 <__sccl+0x44>
 80072b2:	42b3      	cmp	r3, r6
 80072b4:	dcf8      	bgt.n	80072a8 <__sccl+0x44>
 80072b6:	3002      	adds	r0, #2
 80072b8:	461a      	mov	r2, r3
 80072ba:	3201      	adds	r2, #1
 80072bc:	4296      	cmp	r6, r2
 80072be:	54a1      	strb	r1, [r4, r2]
 80072c0:	dcfb      	bgt.n	80072ba <__sccl+0x56>
 80072c2:	1af2      	subs	r2, r6, r3
 80072c4:	3a01      	subs	r2, #1
 80072c6:	1c5d      	adds	r5, r3, #1
 80072c8:	42b3      	cmp	r3, r6
 80072ca:	bfa8      	it	ge
 80072cc:	2200      	movge	r2, #0
 80072ce:	18ab      	adds	r3, r5, r2
 80072d0:	e7e1      	b.n	8007296 <__sccl+0x32>
 80072d2:	4610      	mov	r0, r2
 80072d4:	e7da      	b.n	800728c <__sccl+0x28>

080072d6 <__submore>:
 80072d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072da:	460c      	mov	r4, r1
 80072dc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80072de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d11d      	bne.n	8007322 <__submore+0x4c>
 80072e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80072ea:	f7ff f92d 	bl	8006548 <_malloc_r>
 80072ee:	b918      	cbnz	r0, 80072f8 <__submore+0x22>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80072fe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007302:	6360      	str	r0, [r4, #52]	@ 0x34
 8007304:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007308:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800730c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007310:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007314:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007318:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800731c:	6020      	str	r0, [r4, #0]
 800731e:	2000      	movs	r0, #0
 8007320:	e7e8      	b.n	80072f4 <__submore+0x1e>
 8007322:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007324:	0077      	lsls	r7, r6, #1
 8007326:	463a      	mov	r2, r7
 8007328:	f000 f848 	bl	80073bc <_realloc_r>
 800732c:	4605      	mov	r5, r0
 800732e:	2800      	cmp	r0, #0
 8007330:	d0de      	beq.n	80072f0 <__submore+0x1a>
 8007332:	eb00 0806 	add.w	r8, r0, r6
 8007336:	4601      	mov	r1, r0
 8007338:	4632      	mov	r2, r6
 800733a:	4640      	mov	r0, r8
 800733c:	f000 f830 	bl	80073a0 <memcpy>
 8007340:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007344:	f8c4 8000 	str.w	r8, [r4]
 8007348:	e7e9      	b.n	800731e <__submore+0x48>

0800734a <memmove>:
 800734a:	4288      	cmp	r0, r1
 800734c:	b510      	push	{r4, lr}
 800734e:	eb01 0402 	add.w	r4, r1, r2
 8007352:	d902      	bls.n	800735a <memmove+0x10>
 8007354:	4284      	cmp	r4, r0
 8007356:	4623      	mov	r3, r4
 8007358:	d807      	bhi.n	800736a <memmove+0x20>
 800735a:	1e43      	subs	r3, r0, #1
 800735c:	42a1      	cmp	r1, r4
 800735e:	d008      	beq.n	8007372 <memmove+0x28>
 8007360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007364:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007368:	e7f8      	b.n	800735c <memmove+0x12>
 800736a:	4402      	add	r2, r0
 800736c:	4601      	mov	r1, r0
 800736e:	428a      	cmp	r2, r1
 8007370:	d100      	bne.n	8007374 <memmove+0x2a>
 8007372:	bd10      	pop	{r4, pc}
 8007374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007378:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800737c:	e7f7      	b.n	800736e <memmove+0x24>
	...

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	@ (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7f9 ff62 	bl	8001254 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200009e0 	.word	0x200009e0

080073a0 <memcpy>:
 80073a0:	440a      	add	r2, r1
 80073a2:	4291      	cmp	r1, r2
 80073a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073a8:	d100      	bne.n	80073ac <memcpy+0xc>
 80073aa:	4770      	bx	lr
 80073ac:	b510      	push	{r4, lr}
 80073ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b6:	4291      	cmp	r1, r2
 80073b8:	d1f9      	bne.n	80073ae <memcpy+0xe>
 80073ba:	bd10      	pop	{r4, pc}

080073bc <_realloc_r>:
 80073bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c0:	4607      	mov	r7, r0
 80073c2:	4614      	mov	r4, r2
 80073c4:	460d      	mov	r5, r1
 80073c6:	b921      	cbnz	r1, 80073d2 <_realloc_r+0x16>
 80073c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	4611      	mov	r1, r2
 80073ce:	f7ff b8bb 	b.w	8006548 <_malloc_r>
 80073d2:	b92a      	cbnz	r2, 80073e0 <_realloc_r+0x24>
 80073d4:	f7ff f84c 	bl	8006470 <_free_r>
 80073d8:	4625      	mov	r5, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e0:	f000 f906 	bl	80075f0 <_malloc_usable_size_r>
 80073e4:	4284      	cmp	r4, r0
 80073e6:	4606      	mov	r6, r0
 80073e8:	d802      	bhi.n	80073f0 <_realloc_r+0x34>
 80073ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ee:	d8f4      	bhi.n	80073da <_realloc_r+0x1e>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff f8a8 	bl	8006548 <_malloc_r>
 80073f8:	4680      	mov	r8, r0
 80073fa:	b908      	cbnz	r0, 8007400 <_realloc_r+0x44>
 80073fc:	4645      	mov	r5, r8
 80073fe:	e7ec      	b.n	80073da <_realloc_r+0x1e>
 8007400:	42b4      	cmp	r4, r6
 8007402:	4622      	mov	r2, r4
 8007404:	4629      	mov	r1, r5
 8007406:	bf28      	it	cs
 8007408:	4632      	movcs	r2, r6
 800740a:	f7ff ffc9 	bl	80073a0 <memcpy>
 800740e:	4629      	mov	r1, r5
 8007410:	4638      	mov	r0, r7
 8007412:	f7ff f82d 	bl	8006470 <_free_r>
 8007416:	e7f1      	b.n	80073fc <_realloc_r+0x40>

08007418 <_strtol_l.isra.0>:
 8007418:	2b24      	cmp	r3, #36	@ 0x24
 800741a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741e:	4686      	mov	lr, r0
 8007420:	4690      	mov	r8, r2
 8007422:	d801      	bhi.n	8007428 <_strtol_l.isra.0+0x10>
 8007424:	2b01      	cmp	r3, #1
 8007426:	d106      	bne.n	8007436 <_strtol_l.isra.0+0x1e>
 8007428:	f7fe fff6 	bl	8006418 <__errno>
 800742c:	2316      	movs	r3, #22
 800742e:	6003      	str	r3, [r0, #0]
 8007430:	2000      	movs	r0, #0
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	4834      	ldr	r0, [pc, #208]	@ (8007508 <_strtol_l.isra.0+0xf0>)
 8007438:	460d      	mov	r5, r1
 800743a:	462a      	mov	r2, r5
 800743c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007440:	5d06      	ldrb	r6, [r0, r4]
 8007442:	f016 0608 	ands.w	r6, r6, #8
 8007446:	d1f8      	bne.n	800743a <_strtol_l.isra.0+0x22>
 8007448:	2c2d      	cmp	r4, #45	@ 0x2d
 800744a:	d110      	bne.n	800746e <_strtol_l.isra.0+0x56>
 800744c:	782c      	ldrb	r4, [r5, #0]
 800744e:	2601      	movs	r6, #1
 8007450:	1c95      	adds	r5, r2, #2
 8007452:	f033 0210 	bics.w	r2, r3, #16
 8007456:	d115      	bne.n	8007484 <_strtol_l.isra.0+0x6c>
 8007458:	2c30      	cmp	r4, #48	@ 0x30
 800745a:	d10d      	bne.n	8007478 <_strtol_l.isra.0+0x60>
 800745c:	782a      	ldrb	r2, [r5, #0]
 800745e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007462:	2a58      	cmp	r2, #88	@ 0x58
 8007464:	d108      	bne.n	8007478 <_strtol_l.isra.0+0x60>
 8007466:	786c      	ldrb	r4, [r5, #1]
 8007468:	3502      	adds	r5, #2
 800746a:	2310      	movs	r3, #16
 800746c:	e00a      	b.n	8007484 <_strtol_l.isra.0+0x6c>
 800746e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007470:	bf04      	itt	eq
 8007472:	782c      	ldrbeq	r4, [r5, #0]
 8007474:	1c95      	addeq	r5, r2, #2
 8007476:	e7ec      	b.n	8007452 <_strtol_l.isra.0+0x3a>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f6      	bne.n	800746a <_strtol_l.isra.0+0x52>
 800747c:	2c30      	cmp	r4, #48	@ 0x30
 800747e:	bf14      	ite	ne
 8007480:	230a      	movne	r3, #10
 8007482:	2308      	moveq	r3, #8
 8007484:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007488:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800748c:	2200      	movs	r2, #0
 800748e:	fbbc f9f3 	udiv	r9, ip, r3
 8007492:	4610      	mov	r0, r2
 8007494:	fb03 ca19 	mls	sl, r3, r9, ip
 8007498:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800749c:	2f09      	cmp	r7, #9
 800749e:	d80f      	bhi.n	80074c0 <_strtol_l.isra.0+0xa8>
 80074a0:	463c      	mov	r4, r7
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	dd1b      	ble.n	80074de <_strtol_l.isra.0+0xc6>
 80074a6:	1c57      	adds	r7, r2, #1
 80074a8:	d007      	beq.n	80074ba <_strtol_l.isra.0+0xa2>
 80074aa:	4581      	cmp	r9, r0
 80074ac:	d314      	bcc.n	80074d8 <_strtol_l.isra.0+0xc0>
 80074ae:	d101      	bne.n	80074b4 <_strtol_l.isra.0+0x9c>
 80074b0:	45a2      	cmp	sl, r4
 80074b2:	db11      	blt.n	80074d8 <_strtol_l.isra.0+0xc0>
 80074b4:	fb00 4003 	mla	r0, r0, r3, r4
 80074b8:	2201      	movs	r2, #1
 80074ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074be:	e7eb      	b.n	8007498 <_strtol_l.isra.0+0x80>
 80074c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80074c4:	2f19      	cmp	r7, #25
 80074c6:	d801      	bhi.n	80074cc <_strtol_l.isra.0+0xb4>
 80074c8:	3c37      	subs	r4, #55	@ 0x37
 80074ca:	e7ea      	b.n	80074a2 <_strtol_l.isra.0+0x8a>
 80074cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80074d0:	2f19      	cmp	r7, #25
 80074d2:	d804      	bhi.n	80074de <_strtol_l.isra.0+0xc6>
 80074d4:	3c57      	subs	r4, #87	@ 0x57
 80074d6:	e7e4      	b.n	80074a2 <_strtol_l.isra.0+0x8a>
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074dc:	e7ed      	b.n	80074ba <_strtol_l.isra.0+0xa2>
 80074de:	1c53      	adds	r3, r2, #1
 80074e0:	d108      	bne.n	80074f4 <_strtol_l.isra.0+0xdc>
 80074e2:	2322      	movs	r3, #34	@ 0x22
 80074e4:	f8ce 3000 	str.w	r3, [lr]
 80074e8:	4660      	mov	r0, ip
 80074ea:	f1b8 0f00 	cmp.w	r8, #0
 80074ee:	d0a0      	beq.n	8007432 <_strtol_l.isra.0+0x1a>
 80074f0:	1e69      	subs	r1, r5, #1
 80074f2:	e006      	b.n	8007502 <_strtol_l.isra.0+0xea>
 80074f4:	b106      	cbz	r6, 80074f8 <_strtol_l.isra.0+0xe0>
 80074f6:	4240      	negs	r0, r0
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	d099      	beq.n	8007432 <_strtol_l.isra.0+0x1a>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d1f6      	bne.n	80074f0 <_strtol_l.isra.0+0xd8>
 8007502:	f8c8 1000 	str.w	r1, [r8]
 8007506:	e794      	b.n	8007432 <_strtol_l.isra.0+0x1a>
 8007508:	0800771f 	.word	0x0800771f

0800750c <_strtol_r>:
 800750c:	f7ff bf84 	b.w	8007418 <_strtol_l.isra.0>

08007510 <_strtoul_l.isra.0>:
 8007510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007514:	4e34      	ldr	r6, [pc, #208]	@ (80075e8 <_strtoul_l.isra.0+0xd8>)
 8007516:	4686      	mov	lr, r0
 8007518:	460d      	mov	r5, r1
 800751a:	4628      	mov	r0, r5
 800751c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007520:	5d37      	ldrb	r7, [r6, r4]
 8007522:	f017 0708 	ands.w	r7, r7, #8
 8007526:	d1f8      	bne.n	800751a <_strtoul_l.isra.0+0xa>
 8007528:	2c2d      	cmp	r4, #45	@ 0x2d
 800752a:	d110      	bne.n	800754e <_strtoul_l.isra.0+0x3e>
 800752c:	782c      	ldrb	r4, [r5, #0]
 800752e:	2701      	movs	r7, #1
 8007530:	1c85      	adds	r5, r0, #2
 8007532:	f033 0010 	bics.w	r0, r3, #16
 8007536:	d115      	bne.n	8007564 <_strtoul_l.isra.0+0x54>
 8007538:	2c30      	cmp	r4, #48	@ 0x30
 800753a:	d10d      	bne.n	8007558 <_strtoul_l.isra.0+0x48>
 800753c:	7828      	ldrb	r0, [r5, #0]
 800753e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007542:	2858      	cmp	r0, #88	@ 0x58
 8007544:	d108      	bne.n	8007558 <_strtoul_l.isra.0+0x48>
 8007546:	786c      	ldrb	r4, [r5, #1]
 8007548:	3502      	adds	r5, #2
 800754a:	2310      	movs	r3, #16
 800754c:	e00a      	b.n	8007564 <_strtoul_l.isra.0+0x54>
 800754e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007550:	bf04      	itt	eq
 8007552:	782c      	ldrbeq	r4, [r5, #0]
 8007554:	1c85      	addeq	r5, r0, #2
 8007556:	e7ec      	b.n	8007532 <_strtoul_l.isra.0+0x22>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f6      	bne.n	800754a <_strtoul_l.isra.0+0x3a>
 800755c:	2c30      	cmp	r4, #48	@ 0x30
 800755e:	bf14      	ite	ne
 8007560:	230a      	movne	r3, #10
 8007562:	2308      	moveq	r3, #8
 8007564:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007568:	2600      	movs	r6, #0
 800756a:	fbb8 f8f3 	udiv	r8, r8, r3
 800756e:	fb03 f908 	mul.w	r9, r3, r8
 8007572:	ea6f 0909 	mvn.w	r9, r9
 8007576:	4630      	mov	r0, r6
 8007578:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800757c:	f1bc 0f09 	cmp.w	ip, #9
 8007580:	d810      	bhi.n	80075a4 <_strtoul_l.isra.0+0x94>
 8007582:	4664      	mov	r4, ip
 8007584:	42a3      	cmp	r3, r4
 8007586:	dd1e      	ble.n	80075c6 <_strtoul_l.isra.0+0xb6>
 8007588:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800758c:	d007      	beq.n	800759e <_strtoul_l.isra.0+0x8e>
 800758e:	4580      	cmp	r8, r0
 8007590:	d316      	bcc.n	80075c0 <_strtoul_l.isra.0+0xb0>
 8007592:	d101      	bne.n	8007598 <_strtoul_l.isra.0+0x88>
 8007594:	45a1      	cmp	r9, r4
 8007596:	db13      	blt.n	80075c0 <_strtoul_l.isra.0+0xb0>
 8007598:	fb00 4003 	mla	r0, r0, r3, r4
 800759c:	2601      	movs	r6, #1
 800759e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075a2:	e7e9      	b.n	8007578 <_strtoul_l.isra.0+0x68>
 80075a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80075a8:	f1bc 0f19 	cmp.w	ip, #25
 80075ac:	d801      	bhi.n	80075b2 <_strtoul_l.isra.0+0xa2>
 80075ae:	3c37      	subs	r4, #55	@ 0x37
 80075b0:	e7e8      	b.n	8007584 <_strtoul_l.isra.0+0x74>
 80075b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80075b6:	f1bc 0f19 	cmp.w	ip, #25
 80075ba:	d804      	bhi.n	80075c6 <_strtoul_l.isra.0+0xb6>
 80075bc:	3c57      	subs	r4, #87	@ 0x57
 80075be:	e7e1      	b.n	8007584 <_strtoul_l.isra.0+0x74>
 80075c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80075c4:	e7eb      	b.n	800759e <_strtoul_l.isra.0+0x8e>
 80075c6:	1c73      	adds	r3, r6, #1
 80075c8:	d106      	bne.n	80075d8 <_strtoul_l.isra.0+0xc8>
 80075ca:	2322      	movs	r3, #34	@ 0x22
 80075cc:	f8ce 3000 	str.w	r3, [lr]
 80075d0:	4630      	mov	r0, r6
 80075d2:	b932      	cbnz	r2, 80075e2 <_strtoul_l.isra.0+0xd2>
 80075d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d8:	b107      	cbz	r7, 80075dc <_strtoul_l.isra.0+0xcc>
 80075da:	4240      	negs	r0, r0
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d0f9      	beq.n	80075d4 <_strtoul_l.isra.0+0xc4>
 80075e0:	b106      	cbz	r6, 80075e4 <_strtoul_l.isra.0+0xd4>
 80075e2:	1e69      	subs	r1, r5, #1
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	e7f5      	b.n	80075d4 <_strtoul_l.isra.0+0xc4>
 80075e8:	0800771f 	.word	0x0800771f

080075ec <_strtoul_r>:
 80075ec:	f7ff bf90 	b.w	8007510 <_strtoul_l.isra.0>

080075f0 <_malloc_usable_size_r>:
 80075f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f4:	1f18      	subs	r0, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	bfbc      	itt	lt
 80075fa:	580b      	ldrlt	r3, [r1, r0]
 80075fc:	18c0      	addlt	r0, r0, r3
 80075fe:	4770      	bx	lr

08007600 <_init>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr

0800760c <_fini>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr
